// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/FM1337/ASB/internal/ent/server"
	"github.com/FM1337/ASB/internal/ent/spammer"
)

// SpammerCreate is the builder for creating a Spammer entity.
type SpammerCreate struct {
	config
	mutation *SpammerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (sc *SpammerCreate) SetCreateTime(t time.Time) *SpammerCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *SpammerCreate) SetNillableCreateTime(t *time.Time) *SpammerCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *SpammerCreate) SetUpdateTime(t time.Time) *SpammerCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sc *SpammerCreate) SetNillableUpdateTime(t *time.Time) *SpammerCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetUserID sets the "user_id" field.
func (sc *SpammerCreate) SetUserID(s string) *SpammerCreate {
	sc.mutation.SetUserID(s)
	return sc
}

// SetRemovedRoles sets the "removed_roles" field.
func (sc *SpammerCreate) SetRemovedRoles(s []string) *SpammerCreate {
	sc.mutation.SetRemovedRoles(s)
	return sc
}

// SetLastFlagged sets the "last_flagged" field.
func (sc *SpammerCreate) SetLastFlagged(t time.Time) *SpammerCreate {
	sc.mutation.SetLastFlagged(t)
	return sc
}

// SetNillableLastFlagged sets the "last_flagged" field if the given value is not nil.
func (sc *SpammerCreate) SetNillableLastFlagged(t *time.Time) *SpammerCreate {
	if t != nil {
		sc.SetLastFlagged(*t)
	}
	return sc
}

// SetServerID sets the "server" edge to the Server entity by ID.
func (sc *SpammerCreate) SetServerID(id int) *SpammerCreate {
	sc.mutation.SetServerID(id)
	return sc
}

// SetServer sets the "server" edge to the Server entity.
func (sc *SpammerCreate) SetServer(s *Server) *SpammerCreate {
	return sc.SetServerID(s.ID)
}

// Mutation returns the SpammerMutation object of the builder.
func (sc *SpammerCreate) Mutation() *SpammerMutation {
	return sc.mutation
}

// Save creates the Spammer in the database.
func (sc *SpammerCreate) Save(ctx context.Context) (*Spammer, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SpammerCreate) SaveX(ctx context.Context) *Spammer {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SpammerCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SpammerCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SpammerCreate) defaults() {
	if _, ok := sc.mutation.CreateTime(); !ok {
		v := spammer.DefaultCreateTime()
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		v := spammer.DefaultUpdateTime()
		sc.mutation.SetUpdateTime(v)
	}
	if _, ok := sc.mutation.LastFlagged(); !ok {
		v := spammer.DefaultLastFlagged()
		sc.mutation.SetLastFlagged(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SpammerCreate) check() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Spammer.create_time"`)}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Spammer.update_time"`)}
	}
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Spammer.user_id"`)}
	}
	if _, ok := sc.mutation.LastFlagged(); !ok {
		return &ValidationError{Name: "last_flagged", err: errors.New(`ent: missing required field "Spammer.last_flagged"`)}
	}
	if _, ok := sc.mutation.ServerID(); !ok {
		return &ValidationError{Name: "server", err: errors.New(`ent: missing required edge "Spammer.server"`)}
	}
	return nil
}

func (sc *SpammerCreate) sqlSave(ctx context.Context) (*Spammer, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SpammerCreate) createSpec() (*Spammer, *sqlgraph.CreateSpec) {
	var (
		_node = &Spammer{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(spammer.Table, sqlgraph.NewFieldSpec(spammer.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(spammer.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.SetField(spammer.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := sc.mutation.UserID(); ok {
		_spec.SetField(spammer.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := sc.mutation.RemovedRoles(); ok {
		_spec.SetField(spammer.FieldRemovedRoles, field.TypeJSON, value)
		_node.RemovedRoles = value
	}
	if value, ok := sc.mutation.LastFlagged(); ok {
		_spec.SetField(spammer.FieldLastFlagged, field.TypeTime, value)
		_node.LastFlagged = value
	}
	if nodes := sc.mutation.ServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   spammer.ServerTable,
			Columns: []string{spammer.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.server_spammer = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Spammer.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SpammerUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (sc *SpammerCreate) OnConflict(opts ...sql.ConflictOption) *SpammerUpsertOne {
	sc.conflict = opts
	return &SpammerUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Spammer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SpammerCreate) OnConflictColumns(columns ...string) *SpammerUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SpammerUpsertOne{
		create: sc,
	}
}

type (
	// SpammerUpsertOne is the builder for "upsert"-ing
	//  one Spammer node.
	SpammerUpsertOne struct {
		create *SpammerCreate
	}

	// SpammerUpsert is the "OnConflict" setter.
	SpammerUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *SpammerUpsert) SetUpdateTime(v time.Time) *SpammerUpsert {
	u.Set(spammer.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SpammerUpsert) UpdateUpdateTime() *SpammerUpsert {
	u.SetExcluded(spammer.FieldUpdateTime)
	return u
}

// SetUserID sets the "user_id" field.
func (u *SpammerUpsert) SetUserID(v string) *SpammerUpsert {
	u.Set(spammer.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SpammerUpsert) UpdateUserID() *SpammerUpsert {
	u.SetExcluded(spammer.FieldUserID)
	return u
}

// SetRemovedRoles sets the "removed_roles" field.
func (u *SpammerUpsert) SetRemovedRoles(v []string) *SpammerUpsert {
	u.Set(spammer.FieldRemovedRoles, v)
	return u
}

// UpdateRemovedRoles sets the "removed_roles" field to the value that was provided on create.
func (u *SpammerUpsert) UpdateRemovedRoles() *SpammerUpsert {
	u.SetExcluded(spammer.FieldRemovedRoles)
	return u
}

// ClearRemovedRoles clears the value of the "removed_roles" field.
func (u *SpammerUpsert) ClearRemovedRoles() *SpammerUpsert {
	u.SetNull(spammer.FieldRemovedRoles)
	return u
}

// SetLastFlagged sets the "last_flagged" field.
func (u *SpammerUpsert) SetLastFlagged(v time.Time) *SpammerUpsert {
	u.Set(spammer.FieldLastFlagged, v)
	return u
}

// UpdateLastFlagged sets the "last_flagged" field to the value that was provided on create.
func (u *SpammerUpsert) UpdateLastFlagged() *SpammerUpsert {
	u.SetExcluded(spammer.FieldLastFlagged)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Spammer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SpammerUpsertOne) UpdateNewValues() *SpammerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(spammer.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Spammer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SpammerUpsertOne) Ignore() *SpammerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SpammerUpsertOne) DoNothing() *SpammerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SpammerCreate.OnConflict
// documentation for more info.
func (u *SpammerUpsertOne) Update(set func(*SpammerUpsert)) *SpammerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SpammerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *SpammerUpsertOne) SetUpdateTime(v time.Time) *SpammerUpsertOne {
	return u.Update(func(s *SpammerUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SpammerUpsertOne) UpdateUpdateTime() *SpammerUpsertOne {
	return u.Update(func(s *SpammerUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetUserID sets the "user_id" field.
func (u *SpammerUpsertOne) SetUserID(v string) *SpammerUpsertOne {
	return u.Update(func(s *SpammerUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SpammerUpsertOne) UpdateUserID() *SpammerUpsertOne {
	return u.Update(func(s *SpammerUpsert) {
		s.UpdateUserID()
	})
}

// SetRemovedRoles sets the "removed_roles" field.
func (u *SpammerUpsertOne) SetRemovedRoles(v []string) *SpammerUpsertOne {
	return u.Update(func(s *SpammerUpsert) {
		s.SetRemovedRoles(v)
	})
}

// UpdateRemovedRoles sets the "removed_roles" field to the value that was provided on create.
func (u *SpammerUpsertOne) UpdateRemovedRoles() *SpammerUpsertOne {
	return u.Update(func(s *SpammerUpsert) {
		s.UpdateRemovedRoles()
	})
}

// ClearRemovedRoles clears the value of the "removed_roles" field.
func (u *SpammerUpsertOne) ClearRemovedRoles() *SpammerUpsertOne {
	return u.Update(func(s *SpammerUpsert) {
		s.ClearRemovedRoles()
	})
}

// SetLastFlagged sets the "last_flagged" field.
func (u *SpammerUpsertOne) SetLastFlagged(v time.Time) *SpammerUpsertOne {
	return u.Update(func(s *SpammerUpsert) {
		s.SetLastFlagged(v)
	})
}

// UpdateLastFlagged sets the "last_flagged" field to the value that was provided on create.
func (u *SpammerUpsertOne) UpdateLastFlagged() *SpammerUpsertOne {
	return u.Update(func(s *SpammerUpsert) {
		s.UpdateLastFlagged()
	})
}

// Exec executes the query.
func (u *SpammerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SpammerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SpammerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SpammerUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SpammerUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SpammerCreateBulk is the builder for creating many Spammer entities in bulk.
type SpammerCreateBulk struct {
	config
	err      error
	builders []*SpammerCreate
	conflict []sql.ConflictOption
}

// Save creates the Spammer entities in the database.
func (scb *SpammerCreateBulk) Save(ctx context.Context) ([]*Spammer, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Spammer, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpammerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SpammerCreateBulk) SaveX(ctx context.Context) []*Spammer {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SpammerCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SpammerCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Spammer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SpammerUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (scb *SpammerCreateBulk) OnConflict(opts ...sql.ConflictOption) *SpammerUpsertBulk {
	scb.conflict = opts
	return &SpammerUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Spammer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SpammerCreateBulk) OnConflictColumns(columns ...string) *SpammerUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SpammerUpsertBulk{
		create: scb,
	}
}

// SpammerUpsertBulk is the builder for "upsert"-ing
// a bulk of Spammer nodes.
type SpammerUpsertBulk struct {
	create *SpammerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Spammer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SpammerUpsertBulk) UpdateNewValues() *SpammerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(spammer.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Spammer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SpammerUpsertBulk) Ignore() *SpammerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SpammerUpsertBulk) DoNothing() *SpammerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SpammerCreateBulk.OnConflict
// documentation for more info.
func (u *SpammerUpsertBulk) Update(set func(*SpammerUpsert)) *SpammerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SpammerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *SpammerUpsertBulk) SetUpdateTime(v time.Time) *SpammerUpsertBulk {
	return u.Update(func(s *SpammerUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SpammerUpsertBulk) UpdateUpdateTime() *SpammerUpsertBulk {
	return u.Update(func(s *SpammerUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetUserID sets the "user_id" field.
func (u *SpammerUpsertBulk) SetUserID(v string) *SpammerUpsertBulk {
	return u.Update(func(s *SpammerUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SpammerUpsertBulk) UpdateUserID() *SpammerUpsertBulk {
	return u.Update(func(s *SpammerUpsert) {
		s.UpdateUserID()
	})
}

// SetRemovedRoles sets the "removed_roles" field.
func (u *SpammerUpsertBulk) SetRemovedRoles(v []string) *SpammerUpsertBulk {
	return u.Update(func(s *SpammerUpsert) {
		s.SetRemovedRoles(v)
	})
}

// UpdateRemovedRoles sets the "removed_roles" field to the value that was provided on create.
func (u *SpammerUpsertBulk) UpdateRemovedRoles() *SpammerUpsertBulk {
	return u.Update(func(s *SpammerUpsert) {
		s.UpdateRemovedRoles()
	})
}

// ClearRemovedRoles clears the value of the "removed_roles" field.
func (u *SpammerUpsertBulk) ClearRemovedRoles() *SpammerUpsertBulk {
	return u.Update(func(s *SpammerUpsert) {
		s.ClearRemovedRoles()
	})
}

// SetLastFlagged sets the "last_flagged" field.
func (u *SpammerUpsertBulk) SetLastFlagged(v time.Time) *SpammerUpsertBulk {
	return u.Update(func(s *SpammerUpsert) {
		s.SetLastFlagged(v)
	})
}

// UpdateLastFlagged sets the "last_flagged" field to the value that was provided on create.
func (u *SpammerUpsertBulk) UpdateLastFlagged() *SpammerUpsertBulk {
	return u.Update(func(s *SpammerUpsert) {
		s.UpdateLastFlagged()
	})
}

// Exec executes the query.
func (u *SpammerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SpammerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SpammerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SpammerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
