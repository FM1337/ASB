// Code generated by ent, DO NOT EDIT.

package cooldown

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the cooldown type in the database.
	Label = "cooldown"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldCount holds the string denoting the count field in the database.
	FieldCount = "count"
	// FieldResetsAt holds the string denoting the resets_at field in the database.
	FieldResetsAt = "resets_at"
	// EdgeServer holds the string denoting the server edge name in mutations.
	EdgeServer = "server"
	// Table holds the table name of the cooldown in the database.
	Table = "cooldowns"
	// ServerTable is the table that holds the server relation/edge.
	ServerTable = "cooldowns"
	// ServerInverseTable is the table name for the Server entity.
	// It exists in this package in order to avoid circular dependency with the "server" package.
	ServerInverseTable = "servers"
	// ServerColumn is the table column denoting the server relation/edge.
	ServerColumn = "server_cooldown"
)

// Columns holds all SQL columns for cooldown fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldUserID,
	FieldHash,
	FieldCount,
	FieldResetsAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "cooldowns"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"server_cooldown",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultCount holds the default value on creation for the "count" field.
	DefaultCount int
	// DefaultResetsAt holds the default value on creation for the "resets_at" field.
	DefaultResetsAt func() time.Time
)

// OrderOption defines the ordering options for the Cooldown queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}

// ByCount orders the results by the count field.
func ByCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCount, opts...).ToFunc()
}

// ByResetsAt orders the results by the resets_at field.
func ByResetsAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResetsAt, opts...).ToFunc()
}

// ByServerField orders the results by server field.
func ByServerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServerStep(), sql.OrderByField(field, opts...))
	}
}
func newServerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ServerTable, ServerColumn),
	)
}
