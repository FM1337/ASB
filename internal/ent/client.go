// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/FM1337/ASB/internal/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/FM1337/ASB/internal/ent/server"
	"github.com/FM1337/ASB/internal/ent/serverconfig"
	"github.com/FM1337/ASB/internal/ent/wordblacklist"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Server is the client for interacting with the Server builders.
	Server *ServerClient
	// ServerConfig is the client for interacting with the ServerConfig builders.
	ServerConfig *ServerConfigClient
	// WordBlacklist is the client for interacting with the WordBlacklist builders.
	WordBlacklist *WordBlacklistClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Server = NewServerClient(c.config)
	c.ServerConfig = NewServerConfigClient(c.config)
	c.WordBlacklist = NewWordBlacklistClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Server:        NewServerClient(cfg),
		ServerConfig:  NewServerConfigClient(cfg),
		WordBlacklist: NewWordBlacklistClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Server:        NewServerClient(cfg),
		ServerConfig:  NewServerConfigClient(cfg),
		WordBlacklist: NewWordBlacklistClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Server.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Server.Use(hooks...)
	c.ServerConfig.Use(hooks...)
	c.WordBlacklist.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Server.Intercept(interceptors...)
	c.ServerConfig.Intercept(interceptors...)
	c.WordBlacklist.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ServerMutation:
		return c.Server.mutate(ctx, m)
	case *ServerConfigMutation:
		return c.ServerConfig.mutate(ctx, m)
	case *WordBlacklistMutation:
		return c.WordBlacklist.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ServerClient is a client for the Server schema.
type ServerClient struct {
	config
}

// NewServerClient returns a client for the Server from the given config.
func NewServerClient(c config) *ServerClient {
	return &ServerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `server.Hooks(f(g(h())))`.
func (c *ServerClient) Use(hooks ...Hook) {
	c.hooks.Server = append(c.hooks.Server, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `server.Intercept(f(g(h())))`.
func (c *ServerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Server = append(c.inters.Server, interceptors...)
}

// Create returns a builder for creating a Server entity.
func (c *ServerClient) Create() *ServerCreate {
	mutation := newServerMutation(c.config, OpCreate)
	return &ServerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Server entities.
func (c *ServerClient) CreateBulk(builders ...*ServerCreate) *ServerCreateBulk {
	return &ServerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ServerClient) MapCreateBulk(slice any, setFunc func(*ServerCreate, int)) *ServerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ServerCreateBulk{err: fmt.Errorf("calling to ServerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ServerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ServerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Server.
func (c *ServerClient) Update() *ServerUpdate {
	mutation := newServerMutation(c.config, OpUpdate)
	return &ServerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerClient) UpdateOne(s *Server) *ServerUpdateOne {
	mutation := newServerMutation(c.config, OpUpdateOne, withServer(s))
	return &ServerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerClient) UpdateOneID(id string) *ServerUpdateOne {
	mutation := newServerMutation(c.config, OpUpdateOne, withServerID(id))
	return &ServerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Server.
func (c *ServerClient) Delete() *ServerDelete {
	mutation := newServerMutation(c.config, OpDelete)
	return &ServerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerClient) DeleteOne(s *Server) *ServerDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerClient) DeleteOneID(id string) *ServerDeleteOne {
	builder := c.Delete().Where(server.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerDeleteOne{builder}
}

// Query returns a query builder for Server.
func (c *ServerClient) Query() *ServerQuery {
	return &ServerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServer},
		inters: c.Interceptors(),
	}
}

// Get returns a Server entity by its id.
func (c *ServerClient) Get(ctx context.Context, id string) (*Server, error) {
	return c.Query().Where(server.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerClient) GetX(ctx context.Context, id string) *Server {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConfiguration queries the configuration edge of a Server.
func (c *ServerClient) QueryConfiguration(s *Server) *ServerConfigQuery {
	query := (&ServerConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(server.Table, server.FieldID, id),
			sqlgraph.To(serverconfig.Table, serverconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, server.ConfigurationTable, server.ConfigurationColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWordBlacklist queries the word_blacklist edge of a Server.
func (c *ServerClient) QueryWordBlacklist(s *Server) *WordBlacklistQuery {
	query := (&WordBlacklistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(server.Table, server.FieldID, id),
			sqlgraph.To(wordblacklist.Table, wordblacklist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, server.WordBlacklistTable, server.WordBlacklistPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerClient) Hooks() []Hook {
	return c.hooks.Server
}

// Interceptors returns the client interceptors.
func (c *ServerClient) Interceptors() []Interceptor {
	return c.inters.Server
}

func (c *ServerClient) mutate(ctx context.Context, m *ServerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Server mutation op: %q", m.Op())
	}
}

// ServerConfigClient is a client for the ServerConfig schema.
type ServerConfigClient struct {
	config
}

// NewServerConfigClient returns a client for the ServerConfig from the given config.
func NewServerConfigClient(c config) *ServerConfigClient {
	return &ServerConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `serverconfig.Hooks(f(g(h())))`.
func (c *ServerConfigClient) Use(hooks ...Hook) {
	c.hooks.ServerConfig = append(c.hooks.ServerConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `serverconfig.Intercept(f(g(h())))`.
func (c *ServerConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerConfig = append(c.inters.ServerConfig, interceptors...)
}

// Create returns a builder for creating a ServerConfig entity.
func (c *ServerConfigClient) Create() *ServerConfigCreate {
	mutation := newServerConfigMutation(c.config, OpCreate)
	return &ServerConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerConfig entities.
func (c *ServerConfigClient) CreateBulk(builders ...*ServerConfigCreate) *ServerConfigCreateBulk {
	return &ServerConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ServerConfigClient) MapCreateBulk(slice any, setFunc func(*ServerConfigCreate, int)) *ServerConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ServerConfigCreateBulk{err: fmt.Errorf("calling to ServerConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ServerConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ServerConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerConfig.
func (c *ServerConfigClient) Update() *ServerConfigUpdate {
	mutation := newServerConfigMutation(c.config, OpUpdate)
	return &ServerConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerConfigClient) UpdateOne(sc *ServerConfig) *ServerConfigUpdateOne {
	mutation := newServerConfigMutation(c.config, OpUpdateOne, withServerConfig(sc))
	return &ServerConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerConfigClient) UpdateOneID(id int) *ServerConfigUpdateOne {
	mutation := newServerConfigMutation(c.config, OpUpdateOne, withServerConfigID(id))
	return &ServerConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerConfig.
func (c *ServerConfigClient) Delete() *ServerConfigDelete {
	mutation := newServerConfigMutation(c.config, OpDelete)
	return &ServerConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerConfigClient) DeleteOne(sc *ServerConfig) *ServerConfigDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerConfigClient) DeleteOneID(id int) *ServerConfigDeleteOne {
	builder := c.Delete().Where(serverconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerConfigDeleteOne{builder}
}

// Query returns a query builder for ServerConfig.
func (c *ServerConfigClient) Query() *ServerConfigQuery {
	return &ServerConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerConfig entity by its id.
func (c *ServerConfigClient) Get(ctx context.Context, id int) (*ServerConfig, error) {
	return c.Query().Where(serverconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerConfigClient) GetX(ctx context.Context, id int) *ServerConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServer queries the server edge of a ServerConfig.
func (c *ServerConfigClient) QueryServer(sc *ServerConfig) *ServerQuery {
	query := (&ServerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serverconfig.Table, serverconfig.FieldID, id),
			sqlgraph.To(server.Table, server.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, serverconfig.ServerTable, serverconfig.ServerColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerConfigClient) Hooks() []Hook {
	return c.hooks.ServerConfig
}

// Interceptors returns the client interceptors.
func (c *ServerConfigClient) Interceptors() []Interceptor {
	return c.inters.ServerConfig
}

func (c *ServerConfigClient) mutate(ctx context.Context, m *ServerConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ServerConfig mutation op: %q", m.Op())
	}
}

// WordBlacklistClient is a client for the WordBlacklist schema.
type WordBlacklistClient struct {
	config
}

// NewWordBlacklistClient returns a client for the WordBlacklist from the given config.
func NewWordBlacklistClient(c config) *WordBlacklistClient {
	return &WordBlacklistClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `wordblacklist.Hooks(f(g(h())))`.
func (c *WordBlacklistClient) Use(hooks ...Hook) {
	c.hooks.WordBlacklist = append(c.hooks.WordBlacklist, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `wordblacklist.Intercept(f(g(h())))`.
func (c *WordBlacklistClient) Intercept(interceptors ...Interceptor) {
	c.inters.WordBlacklist = append(c.inters.WordBlacklist, interceptors...)
}

// Create returns a builder for creating a WordBlacklist entity.
func (c *WordBlacklistClient) Create() *WordBlacklistCreate {
	mutation := newWordBlacklistMutation(c.config, OpCreate)
	return &WordBlacklistCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WordBlacklist entities.
func (c *WordBlacklistClient) CreateBulk(builders ...*WordBlacklistCreate) *WordBlacklistCreateBulk {
	return &WordBlacklistCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WordBlacklistClient) MapCreateBulk(slice any, setFunc func(*WordBlacklistCreate, int)) *WordBlacklistCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WordBlacklistCreateBulk{err: fmt.Errorf("calling to WordBlacklistClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WordBlacklistCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WordBlacklistCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WordBlacklist.
func (c *WordBlacklistClient) Update() *WordBlacklistUpdate {
	mutation := newWordBlacklistMutation(c.config, OpUpdate)
	return &WordBlacklistUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WordBlacklistClient) UpdateOne(wb *WordBlacklist) *WordBlacklistUpdateOne {
	mutation := newWordBlacklistMutation(c.config, OpUpdateOne, withWordBlacklist(wb))
	return &WordBlacklistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WordBlacklistClient) UpdateOneID(id int) *WordBlacklistUpdateOne {
	mutation := newWordBlacklistMutation(c.config, OpUpdateOne, withWordBlacklistID(id))
	return &WordBlacklistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WordBlacklist.
func (c *WordBlacklistClient) Delete() *WordBlacklistDelete {
	mutation := newWordBlacklistMutation(c.config, OpDelete)
	return &WordBlacklistDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WordBlacklistClient) DeleteOne(wb *WordBlacklist) *WordBlacklistDeleteOne {
	return c.DeleteOneID(wb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WordBlacklistClient) DeleteOneID(id int) *WordBlacklistDeleteOne {
	builder := c.Delete().Where(wordblacklist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WordBlacklistDeleteOne{builder}
}

// Query returns a query builder for WordBlacklist.
func (c *WordBlacklistClient) Query() *WordBlacklistQuery {
	return &WordBlacklistQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWordBlacklist},
		inters: c.Interceptors(),
	}
}

// Get returns a WordBlacklist entity by its id.
func (c *WordBlacklistClient) Get(ctx context.Context, id int) (*WordBlacklist, error) {
	return c.Query().Where(wordblacklist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WordBlacklistClient) GetX(ctx context.Context, id int) *WordBlacklist {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServer queries the server edge of a WordBlacklist.
func (c *WordBlacklistClient) QueryServer(wb *WordBlacklist) *ServerQuery {
	query := (&ServerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(wordblacklist.Table, wordblacklist.FieldID, id),
			sqlgraph.To(server.Table, server.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, wordblacklist.ServerTable, wordblacklist.ServerPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(wb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WordBlacklistClient) Hooks() []Hook {
	return c.hooks.WordBlacklist
}

// Interceptors returns the client interceptors.
func (c *WordBlacklistClient) Interceptors() []Interceptor {
	return c.inters.WordBlacklist
}

func (c *WordBlacklistClient) mutate(ctx context.Context, m *WordBlacklistMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WordBlacklistCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WordBlacklistUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WordBlacklistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WordBlacklistDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WordBlacklist mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Server, ServerConfig, WordBlacklist []ent.Hook
	}
	inters struct {
		Server, ServerConfig, WordBlacklist []ent.Interceptor
	}
)
