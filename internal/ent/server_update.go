// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/FM1337/ASB/internal/ent/cooldown"
	"github.com/FM1337/ASB/internal/ent/predicate"
	"github.com/FM1337/ASB/internal/ent/server"
	"github.com/FM1337/ASB/internal/ent/serverconfig"
	"github.com/FM1337/ASB/internal/ent/spammer"
	"github.com/FM1337/ASB/internal/ent/wordblacklist"
)

// ServerUpdate is the builder for updating Server entities.
type ServerUpdate struct {
	config
	hooks     []Hook
	mutation  *ServerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ServerUpdate builder.
func (su *ServerUpdate) Where(ps ...predicate.Server) *ServerUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *ServerUpdate) SetUpdateTime(t time.Time) *ServerUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetServerID sets the "server_id" field.
func (su *ServerUpdate) SetServerID(s string) *ServerUpdate {
	su.mutation.SetServerID(s)
	return su
}

// SetNillableServerID sets the "server_id" field if the given value is not nil.
func (su *ServerUpdate) SetNillableServerID(s *string) *ServerUpdate {
	if s != nil {
		su.SetServerID(*s)
	}
	return su
}

// SetOwnerID sets the "owner_id" field.
func (su *ServerUpdate) SetOwnerID(s string) *ServerUpdate {
	su.mutation.SetOwnerID(s)
	return su
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (su *ServerUpdate) SetNillableOwnerID(s *string) *ServerUpdate {
	if s != nil {
		su.SetOwnerID(*s)
	}
	return su
}

// SetEnabled sets the "enabled" field.
func (su *ServerUpdate) SetEnabled(b bool) *ServerUpdate {
	su.mutation.SetEnabled(b)
	return su
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (su *ServerUpdate) SetNillableEnabled(b *bool) *ServerUpdate {
	if b != nil {
		su.SetEnabled(*b)
	}
	return su
}

// SetConfigurationID sets the "configuration" edge to the ServerConfig entity by ID.
func (su *ServerUpdate) SetConfigurationID(id int) *ServerUpdate {
	su.mutation.SetConfigurationID(id)
	return su
}

// SetConfiguration sets the "configuration" edge to the ServerConfig entity.
func (su *ServerUpdate) SetConfiguration(s *ServerConfig) *ServerUpdate {
	return su.SetConfigurationID(s.ID)
}

// SetSpammerID sets the "spammer" edge to the Spammer entity by ID.
func (su *ServerUpdate) SetSpammerID(id int) *ServerUpdate {
	su.mutation.SetSpammerID(id)
	return su
}

// SetNillableSpammerID sets the "spammer" edge to the Spammer entity by ID if the given value is not nil.
func (su *ServerUpdate) SetNillableSpammerID(id *int) *ServerUpdate {
	if id != nil {
		su = su.SetSpammerID(*id)
	}
	return su
}

// SetSpammer sets the "spammer" edge to the Spammer entity.
func (su *ServerUpdate) SetSpammer(s *Spammer) *ServerUpdate {
	return su.SetSpammerID(s.ID)
}

// AddWordBlacklistIDs adds the "word_blacklist" edge to the WordBlacklist entity by IDs.
func (su *ServerUpdate) AddWordBlacklistIDs(ids ...int) *ServerUpdate {
	su.mutation.AddWordBlacklistIDs(ids...)
	return su
}

// AddWordBlacklist adds the "word_blacklist" edges to the WordBlacklist entity.
func (su *ServerUpdate) AddWordBlacklist(w ...*WordBlacklist) *ServerUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return su.AddWordBlacklistIDs(ids...)
}

// AddCooldownIDs adds the "cooldown" edge to the Cooldown entity by IDs.
func (su *ServerUpdate) AddCooldownIDs(ids ...int) *ServerUpdate {
	su.mutation.AddCooldownIDs(ids...)
	return su
}

// AddCooldown adds the "cooldown" edges to the Cooldown entity.
func (su *ServerUpdate) AddCooldown(c ...*Cooldown) *ServerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddCooldownIDs(ids...)
}

// Mutation returns the ServerMutation object of the builder.
func (su *ServerUpdate) Mutation() *ServerMutation {
	return su.mutation
}

// ClearConfiguration clears the "configuration" edge to the ServerConfig entity.
func (su *ServerUpdate) ClearConfiguration() *ServerUpdate {
	su.mutation.ClearConfiguration()
	return su
}

// ClearSpammer clears the "spammer" edge to the Spammer entity.
func (su *ServerUpdate) ClearSpammer() *ServerUpdate {
	su.mutation.ClearSpammer()
	return su
}

// ClearWordBlacklist clears all "word_blacklist" edges to the WordBlacklist entity.
func (su *ServerUpdate) ClearWordBlacklist() *ServerUpdate {
	su.mutation.ClearWordBlacklist()
	return su
}

// RemoveWordBlacklistIDs removes the "word_blacklist" edge to WordBlacklist entities by IDs.
func (su *ServerUpdate) RemoveWordBlacklistIDs(ids ...int) *ServerUpdate {
	su.mutation.RemoveWordBlacklistIDs(ids...)
	return su
}

// RemoveWordBlacklist removes "word_blacklist" edges to WordBlacklist entities.
func (su *ServerUpdate) RemoveWordBlacklist(w ...*WordBlacklist) *ServerUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return su.RemoveWordBlacklistIDs(ids...)
}

// ClearCooldown clears all "cooldown" edges to the Cooldown entity.
func (su *ServerUpdate) ClearCooldown() *ServerUpdate {
	su.mutation.ClearCooldown()
	return su
}

// RemoveCooldownIDs removes the "cooldown" edge to Cooldown entities by IDs.
func (su *ServerUpdate) RemoveCooldownIDs(ids ...int) *ServerUpdate {
	su.mutation.RemoveCooldownIDs(ids...)
	return su
}

// RemoveCooldown removes "cooldown" edges to Cooldown entities.
func (su *ServerUpdate) RemoveCooldown(c ...*Cooldown) *ServerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveCooldownIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServerUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServerUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServerUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServerUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ServerUpdate) defaults() {
	if _, ok := su.mutation.UpdateTime(); !ok {
		v := server.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ServerUpdate) check() error {
	if _, ok := su.mutation.ConfigurationID(); su.mutation.ConfigurationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Server.configuration"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *ServerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ServerUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *ServerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(server.Table, server.Columns, sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.SetField(server.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.ServerID(); ok {
		_spec.SetField(server.FieldServerID, field.TypeString, value)
	}
	if value, ok := su.mutation.OwnerID(); ok {
		_spec.SetField(server.FieldOwnerID, field.TypeString, value)
	}
	if value, ok := su.mutation.Enabled(); ok {
		_spec.SetField(server.FieldEnabled, field.TypeBool, value)
	}
	if su.mutation.ConfigurationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   server.ConfigurationTable,
			Columns: []string{server.ConfigurationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serverconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ConfigurationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   server.ConfigurationTable,
			Columns: []string{server.ConfigurationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serverconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SpammerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   server.SpammerTable,
			Columns: []string{server.SpammerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spammer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SpammerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   server.SpammerTable,
			Columns: []string{server.SpammerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spammer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.WordBlacklistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   server.WordBlacklistTable,
			Columns: server.WordBlacklistPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wordblacklist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedWordBlacklistIDs(); len(nodes) > 0 && !su.mutation.WordBlacklistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   server.WordBlacklistTable,
			Columns: server.WordBlacklistPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wordblacklist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.WordBlacklistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   server.WordBlacklistTable,
			Columns: server.WordBlacklistPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wordblacklist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CooldownCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.CooldownTable,
			Columns: []string{server.CooldownColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cooldown.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCooldownIDs(); len(nodes) > 0 && !su.mutation.CooldownCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.CooldownTable,
			Columns: []string{server.CooldownColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cooldown.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CooldownIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.CooldownTable,
			Columns: []string{server.CooldownColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cooldown.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{server.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ServerUpdateOne is the builder for updating a single Server entity.
type ServerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ServerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (suo *ServerUpdateOne) SetUpdateTime(t time.Time) *ServerUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetServerID sets the "server_id" field.
func (suo *ServerUpdateOne) SetServerID(s string) *ServerUpdateOne {
	suo.mutation.SetServerID(s)
	return suo
}

// SetNillableServerID sets the "server_id" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableServerID(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetServerID(*s)
	}
	return suo
}

// SetOwnerID sets the "owner_id" field.
func (suo *ServerUpdateOne) SetOwnerID(s string) *ServerUpdateOne {
	suo.mutation.SetOwnerID(s)
	return suo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableOwnerID(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetOwnerID(*s)
	}
	return suo
}

// SetEnabled sets the "enabled" field.
func (suo *ServerUpdateOne) SetEnabled(b bool) *ServerUpdateOne {
	suo.mutation.SetEnabled(b)
	return suo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableEnabled(b *bool) *ServerUpdateOne {
	if b != nil {
		suo.SetEnabled(*b)
	}
	return suo
}

// SetConfigurationID sets the "configuration" edge to the ServerConfig entity by ID.
func (suo *ServerUpdateOne) SetConfigurationID(id int) *ServerUpdateOne {
	suo.mutation.SetConfigurationID(id)
	return suo
}

// SetConfiguration sets the "configuration" edge to the ServerConfig entity.
func (suo *ServerUpdateOne) SetConfiguration(s *ServerConfig) *ServerUpdateOne {
	return suo.SetConfigurationID(s.ID)
}

// SetSpammerID sets the "spammer" edge to the Spammer entity by ID.
func (suo *ServerUpdateOne) SetSpammerID(id int) *ServerUpdateOne {
	suo.mutation.SetSpammerID(id)
	return suo
}

// SetNillableSpammerID sets the "spammer" edge to the Spammer entity by ID if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableSpammerID(id *int) *ServerUpdateOne {
	if id != nil {
		suo = suo.SetSpammerID(*id)
	}
	return suo
}

// SetSpammer sets the "spammer" edge to the Spammer entity.
func (suo *ServerUpdateOne) SetSpammer(s *Spammer) *ServerUpdateOne {
	return suo.SetSpammerID(s.ID)
}

// AddWordBlacklistIDs adds the "word_blacklist" edge to the WordBlacklist entity by IDs.
func (suo *ServerUpdateOne) AddWordBlacklistIDs(ids ...int) *ServerUpdateOne {
	suo.mutation.AddWordBlacklistIDs(ids...)
	return suo
}

// AddWordBlacklist adds the "word_blacklist" edges to the WordBlacklist entity.
func (suo *ServerUpdateOne) AddWordBlacklist(w ...*WordBlacklist) *ServerUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return suo.AddWordBlacklistIDs(ids...)
}

// AddCooldownIDs adds the "cooldown" edge to the Cooldown entity by IDs.
func (suo *ServerUpdateOne) AddCooldownIDs(ids ...int) *ServerUpdateOne {
	suo.mutation.AddCooldownIDs(ids...)
	return suo
}

// AddCooldown adds the "cooldown" edges to the Cooldown entity.
func (suo *ServerUpdateOne) AddCooldown(c ...*Cooldown) *ServerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddCooldownIDs(ids...)
}

// Mutation returns the ServerMutation object of the builder.
func (suo *ServerUpdateOne) Mutation() *ServerMutation {
	return suo.mutation
}

// ClearConfiguration clears the "configuration" edge to the ServerConfig entity.
func (suo *ServerUpdateOne) ClearConfiguration() *ServerUpdateOne {
	suo.mutation.ClearConfiguration()
	return suo
}

// ClearSpammer clears the "spammer" edge to the Spammer entity.
func (suo *ServerUpdateOne) ClearSpammer() *ServerUpdateOne {
	suo.mutation.ClearSpammer()
	return suo
}

// ClearWordBlacklist clears all "word_blacklist" edges to the WordBlacklist entity.
func (suo *ServerUpdateOne) ClearWordBlacklist() *ServerUpdateOne {
	suo.mutation.ClearWordBlacklist()
	return suo
}

// RemoveWordBlacklistIDs removes the "word_blacklist" edge to WordBlacklist entities by IDs.
func (suo *ServerUpdateOne) RemoveWordBlacklistIDs(ids ...int) *ServerUpdateOne {
	suo.mutation.RemoveWordBlacklistIDs(ids...)
	return suo
}

// RemoveWordBlacklist removes "word_blacklist" edges to WordBlacklist entities.
func (suo *ServerUpdateOne) RemoveWordBlacklist(w ...*WordBlacklist) *ServerUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return suo.RemoveWordBlacklistIDs(ids...)
}

// ClearCooldown clears all "cooldown" edges to the Cooldown entity.
func (suo *ServerUpdateOne) ClearCooldown() *ServerUpdateOne {
	suo.mutation.ClearCooldown()
	return suo
}

// RemoveCooldownIDs removes the "cooldown" edge to Cooldown entities by IDs.
func (suo *ServerUpdateOne) RemoveCooldownIDs(ids ...int) *ServerUpdateOne {
	suo.mutation.RemoveCooldownIDs(ids...)
	return suo
}

// RemoveCooldown removes "cooldown" edges to Cooldown entities.
func (suo *ServerUpdateOne) RemoveCooldown(c ...*Cooldown) *ServerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveCooldownIDs(ids...)
}

// Where appends a list predicates to the ServerUpdate builder.
func (suo *ServerUpdateOne) Where(ps ...predicate.Server) *ServerUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServerUpdateOne) Select(field string, fields ...string) *ServerUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Server entity.
func (suo *ServerUpdateOne) Save(ctx context.Context) (*Server, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServerUpdateOne) SaveX(ctx context.Context) *Server {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServerUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServerUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ServerUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdateTime(); !ok {
		v := server.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ServerUpdateOne) check() error {
	if _, ok := suo.mutation.ConfigurationID(); suo.mutation.ConfigurationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Server.configuration"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *ServerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ServerUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *ServerUpdateOne) sqlSave(ctx context.Context) (_node *Server, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(server.Table, server.Columns, sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Server.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, server.FieldID)
		for _, f := range fields {
			if !server.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != server.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.SetField(server.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.ServerID(); ok {
		_spec.SetField(server.FieldServerID, field.TypeString, value)
	}
	if value, ok := suo.mutation.OwnerID(); ok {
		_spec.SetField(server.FieldOwnerID, field.TypeString, value)
	}
	if value, ok := suo.mutation.Enabled(); ok {
		_spec.SetField(server.FieldEnabled, field.TypeBool, value)
	}
	if suo.mutation.ConfigurationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   server.ConfigurationTable,
			Columns: []string{server.ConfigurationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serverconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ConfigurationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   server.ConfigurationTable,
			Columns: []string{server.ConfigurationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serverconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SpammerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   server.SpammerTable,
			Columns: []string{server.SpammerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spammer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SpammerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   server.SpammerTable,
			Columns: []string{server.SpammerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(spammer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.WordBlacklistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   server.WordBlacklistTable,
			Columns: server.WordBlacklistPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wordblacklist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedWordBlacklistIDs(); len(nodes) > 0 && !suo.mutation.WordBlacklistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   server.WordBlacklistTable,
			Columns: server.WordBlacklistPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wordblacklist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.WordBlacklistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   server.WordBlacklistTable,
			Columns: server.WordBlacklistPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wordblacklist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CooldownCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.CooldownTable,
			Columns: []string{server.CooldownColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cooldown.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCooldownIDs(); len(nodes) > 0 && !suo.mutation.CooldownCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.CooldownTable,
			Columns: []string{server.CooldownColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cooldown.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CooldownIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.CooldownTable,
			Columns: []string{server.CooldownColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cooldown.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Server{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{server.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
