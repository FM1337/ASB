// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/FM1337/ASB/internal/ent/cooldown"
	"github.com/FM1337/ASB/internal/ent/predicate"
	"github.com/FM1337/ASB/internal/ent/server"
)

// CooldownUpdate is the builder for updating Cooldown entities.
type CooldownUpdate struct {
	config
	hooks     []Hook
	mutation  *CooldownMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CooldownUpdate builder.
func (cu *CooldownUpdate) Where(ps ...predicate.Cooldown) *CooldownUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CooldownUpdate) SetUpdateTime(t time.Time) *CooldownUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *CooldownUpdate) SetUserID(s string) *CooldownUpdate {
	cu.mutation.SetUserID(s)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *CooldownUpdate) SetNillableUserID(s *string) *CooldownUpdate {
	if s != nil {
		cu.SetUserID(*s)
	}
	return cu
}

// SetHash sets the "hash" field.
func (cu *CooldownUpdate) SetHash(s string) *CooldownUpdate {
	cu.mutation.SetHash(s)
	return cu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (cu *CooldownUpdate) SetNillableHash(s *string) *CooldownUpdate {
	if s != nil {
		cu.SetHash(*s)
	}
	return cu
}

// SetCount sets the "count" field.
func (cu *CooldownUpdate) SetCount(i int) *CooldownUpdate {
	cu.mutation.ResetCount()
	cu.mutation.SetCount(i)
	return cu
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (cu *CooldownUpdate) SetNillableCount(i *int) *CooldownUpdate {
	if i != nil {
		cu.SetCount(*i)
	}
	return cu
}

// AddCount adds i to the "count" field.
func (cu *CooldownUpdate) AddCount(i int) *CooldownUpdate {
	cu.mutation.AddCount(i)
	return cu
}

// SetResetsAt sets the "resets_at" field.
func (cu *CooldownUpdate) SetResetsAt(t time.Time) *CooldownUpdate {
	cu.mutation.SetResetsAt(t)
	return cu
}

// SetNillableResetsAt sets the "resets_at" field if the given value is not nil.
func (cu *CooldownUpdate) SetNillableResetsAt(t *time.Time) *CooldownUpdate {
	if t != nil {
		cu.SetResetsAt(*t)
	}
	return cu
}

// SetServerID sets the "server" edge to the Server entity by ID.
func (cu *CooldownUpdate) SetServerID(id int) *CooldownUpdate {
	cu.mutation.SetServerID(id)
	return cu
}

// SetServer sets the "server" edge to the Server entity.
func (cu *CooldownUpdate) SetServer(s *Server) *CooldownUpdate {
	return cu.SetServerID(s.ID)
}

// Mutation returns the CooldownMutation object of the builder.
func (cu *CooldownUpdate) Mutation() *CooldownMutation {
	return cu.mutation
}

// ClearServer clears the "server" edge to the Server entity.
func (cu *CooldownUpdate) ClearServer() *CooldownUpdate {
	cu.mutation.ClearServer()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CooldownUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CooldownUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CooldownUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CooldownUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CooldownUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := cooldown.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CooldownUpdate) check() error {
	if _, ok := cu.mutation.ServerID(); cu.mutation.ServerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Cooldown.server"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CooldownUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CooldownUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CooldownUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cooldown.Table, cooldown.Columns, sqlgraph.NewFieldSpec(cooldown.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(cooldown.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UserID(); ok {
		_spec.SetField(cooldown.FieldUserID, field.TypeString, value)
	}
	if value, ok := cu.mutation.Hash(); ok {
		_spec.SetField(cooldown.FieldHash, field.TypeString, value)
	}
	if value, ok := cu.mutation.Count(); ok {
		_spec.SetField(cooldown.FieldCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedCount(); ok {
		_spec.AddField(cooldown.FieldCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ResetsAt(); ok {
		_spec.SetField(cooldown.FieldResetsAt, field.TypeTime, value)
	}
	if cu.mutation.ServerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cooldown.ServerTable,
			Columns: []string{cooldown.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cooldown.ServerTable,
			Columns: []string{cooldown.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cooldown.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CooldownUpdateOne is the builder for updating a single Cooldown entity.
type CooldownUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CooldownMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CooldownUpdateOne) SetUpdateTime(t time.Time) *CooldownUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetUserID sets the "user_id" field.
func (cuo *CooldownUpdateOne) SetUserID(s string) *CooldownUpdateOne {
	cuo.mutation.SetUserID(s)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *CooldownUpdateOne) SetNillableUserID(s *string) *CooldownUpdateOne {
	if s != nil {
		cuo.SetUserID(*s)
	}
	return cuo
}

// SetHash sets the "hash" field.
func (cuo *CooldownUpdateOne) SetHash(s string) *CooldownUpdateOne {
	cuo.mutation.SetHash(s)
	return cuo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (cuo *CooldownUpdateOne) SetNillableHash(s *string) *CooldownUpdateOne {
	if s != nil {
		cuo.SetHash(*s)
	}
	return cuo
}

// SetCount sets the "count" field.
func (cuo *CooldownUpdateOne) SetCount(i int) *CooldownUpdateOne {
	cuo.mutation.ResetCount()
	cuo.mutation.SetCount(i)
	return cuo
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (cuo *CooldownUpdateOne) SetNillableCount(i *int) *CooldownUpdateOne {
	if i != nil {
		cuo.SetCount(*i)
	}
	return cuo
}

// AddCount adds i to the "count" field.
func (cuo *CooldownUpdateOne) AddCount(i int) *CooldownUpdateOne {
	cuo.mutation.AddCount(i)
	return cuo
}

// SetResetsAt sets the "resets_at" field.
func (cuo *CooldownUpdateOne) SetResetsAt(t time.Time) *CooldownUpdateOne {
	cuo.mutation.SetResetsAt(t)
	return cuo
}

// SetNillableResetsAt sets the "resets_at" field if the given value is not nil.
func (cuo *CooldownUpdateOne) SetNillableResetsAt(t *time.Time) *CooldownUpdateOne {
	if t != nil {
		cuo.SetResetsAt(*t)
	}
	return cuo
}

// SetServerID sets the "server" edge to the Server entity by ID.
func (cuo *CooldownUpdateOne) SetServerID(id int) *CooldownUpdateOne {
	cuo.mutation.SetServerID(id)
	return cuo
}

// SetServer sets the "server" edge to the Server entity.
func (cuo *CooldownUpdateOne) SetServer(s *Server) *CooldownUpdateOne {
	return cuo.SetServerID(s.ID)
}

// Mutation returns the CooldownMutation object of the builder.
func (cuo *CooldownUpdateOne) Mutation() *CooldownMutation {
	return cuo.mutation
}

// ClearServer clears the "server" edge to the Server entity.
func (cuo *CooldownUpdateOne) ClearServer() *CooldownUpdateOne {
	cuo.mutation.ClearServer()
	return cuo
}

// Where appends a list predicates to the CooldownUpdate builder.
func (cuo *CooldownUpdateOne) Where(ps ...predicate.Cooldown) *CooldownUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CooldownUpdateOne) Select(field string, fields ...string) *CooldownUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cooldown entity.
func (cuo *CooldownUpdateOne) Save(ctx context.Context) (*Cooldown, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CooldownUpdateOne) SaveX(ctx context.Context) *Cooldown {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CooldownUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CooldownUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CooldownUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := cooldown.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CooldownUpdateOne) check() error {
	if _, ok := cuo.mutation.ServerID(); cuo.mutation.ServerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Cooldown.server"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CooldownUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CooldownUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CooldownUpdateOne) sqlSave(ctx context.Context) (_node *Cooldown, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cooldown.Table, cooldown.Columns, sqlgraph.NewFieldSpec(cooldown.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cooldown.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cooldown.FieldID)
		for _, f := range fields {
			if !cooldown.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cooldown.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(cooldown.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UserID(); ok {
		_spec.SetField(cooldown.FieldUserID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Hash(); ok {
		_spec.SetField(cooldown.FieldHash, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Count(); ok {
		_spec.SetField(cooldown.FieldCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedCount(); ok {
		_spec.AddField(cooldown.FieldCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ResetsAt(); ok {
		_spec.SetField(cooldown.FieldResetsAt, field.TypeTime, value)
	}
	if cuo.mutation.ServerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cooldown.ServerTable,
			Columns: []string{cooldown.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cooldown.ServerTable,
			Columns: []string{cooldown.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Cooldown{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cooldown.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
