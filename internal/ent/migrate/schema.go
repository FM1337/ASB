// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ServersColumns holds the columns for the "servers" table.
	ServersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "owner_id", Type: field.TypeString},
		{Name: "enabled", Type: field.TypeBool, Default: false},
		{Name: "server_configuration", Type: field.TypeInt},
	}
	// ServersTable holds the schema information for the "servers" table.
	ServersTable = &schema.Table{
		Name:       "servers",
		Columns:    ServersColumns,
		PrimaryKey: []*schema.Column{ServersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "servers_server_configs_configuration",
				Columns:    []*schema.Column{ServersColumns[5]},
				RefColumns: []*schema.Column{ServerConfigsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ServerConfigsColumns holds the columns for the "server_configs" table.
	ServerConfigsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "remove_roles", Type: field.TypeBool, Default: false},
		{Name: "give_role", Type: field.TypeBool, Default: false},
		{Name: "timeout", Type: field.TypeBool, Default: false},
		{Name: "kick", Type: field.TypeBool, Default: false},
		{Name: "ban", Type: field.TypeBool, Default: false},
		{Name: "check_invites", Type: field.TypeBool, Default: false},
		{Name: "check_links", Type: field.TypeBool, Default: false},
		{Name: "ratelimit", Type: field.TypeBool, Default: false},
		{Name: "alerts", Type: field.TypeBool, Default: false},
		{Name: "flag_links", Type: field.TypeBool, Default: false},
		{Name: "log_channel", Type: field.TypeString},
		{Name: "excluded_channels", Type: field.TypeJSON},
		{Name: "excluded_roles", Type: field.TypeJSON},
		{Name: "excluded_users", Type: field.TypeJSON},
		{Name: "given_role", Type: field.TypeString},
		{Name: "ratelimit_message", Type: field.TypeInt, Default: 3},
		{Name: "ratelimit_time", Type: field.TypeEnum, Enums: []string{"30s", "1m", "2m", "3m", "4m", "5m"}, Default: "5m"},
		{Name: "timeout_time", Type: field.TypeEnum, Enums: []string{"60s", "5m", "10m", "1h", "1d", "1w"}, Default: "1h"},
		{Name: "ban_delete_message_time", Type: field.TypeEnum, Enums: []string{"1h", "6h", "12h", "1d", "3d", "1w"}, Default: "1h"},
	}
	// ServerConfigsTable holds the schema information for the "server_configs" table.
	ServerConfigsTable = &schema.Table{
		Name:       "server_configs",
		Columns:    ServerConfigsColumns,
		PrimaryKey: []*schema.Column{ServerConfigsColumns[0]},
	}
	// WordBlacklistsColumns holds the columns for the "word_blacklists" table.
	WordBlacklistsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "word", Type: field.TypeString},
	}
	// WordBlacklistsTable holds the schema information for the "word_blacklists" table.
	WordBlacklistsTable = &schema.Table{
		Name:       "word_blacklists",
		Columns:    WordBlacklistsColumns,
		PrimaryKey: []*schema.Column{WordBlacklistsColumns[0]},
	}
	// ServerWordBlacklistColumns holds the columns for the "server_word_blacklist" table.
	ServerWordBlacklistColumns = []*schema.Column{
		{Name: "server_id", Type: field.TypeString},
		{Name: "word_blacklist_id", Type: field.TypeInt},
	}
	// ServerWordBlacklistTable holds the schema information for the "server_word_blacklist" table.
	ServerWordBlacklistTable = &schema.Table{
		Name:       "server_word_blacklist",
		Columns:    ServerWordBlacklistColumns,
		PrimaryKey: []*schema.Column{ServerWordBlacklistColumns[0], ServerWordBlacklistColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "server_word_blacklist_server_id",
				Columns:    []*schema.Column{ServerWordBlacklistColumns[0]},
				RefColumns: []*schema.Column{ServersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "server_word_blacklist_word_blacklist_id",
				Columns:    []*schema.Column{ServerWordBlacklistColumns[1]},
				RefColumns: []*schema.Column{WordBlacklistsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ServersTable,
		ServerConfigsTable,
		WordBlacklistsTable,
		ServerWordBlacklistTable,
	}
)

func init() {
	ServersTable.ForeignKeys[0].RefTable = ServerConfigsTable
	ServerWordBlacklistTable.ForeignKeys[0].RefTable = ServersTable
	ServerWordBlacklistTable.ForeignKeys[1].RefTable = WordBlacklistsTable
}
