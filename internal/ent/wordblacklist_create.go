// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/FM1337/ASB/internal/ent/server"
	"github.com/FM1337/ASB/internal/ent/wordblacklist"
)

// WordBlacklistCreate is the builder for creating a WordBlacklist entity.
type WordBlacklistCreate struct {
	config
	mutation *WordBlacklistMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (wbc *WordBlacklistCreate) SetCreateTime(t time.Time) *WordBlacklistCreate {
	wbc.mutation.SetCreateTime(t)
	return wbc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wbc *WordBlacklistCreate) SetNillableCreateTime(t *time.Time) *WordBlacklistCreate {
	if t != nil {
		wbc.SetCreateTime(*t)
	}
	return wbc
}

// SetUpdateTime sets the "update_time" field.
func (wbc *WordBlacklistCreate) SetUpdateTime(t time.Time) *WordBlacklistCreate {
	wbc.mutation.SetUpdateTime(t)
	return wbc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (wbc *WordBlacklistCreate) SetNillableUpdateTime(t *time.Time) *WordBlacklistCreate {
	if t != nil {
		wbc.SetUpdateTime(*t)
	}
	return wbc
}

// SetWord sets the "word" field.
func (wbc *WordBlacklistCreate) SetWord(s string) *WordBlacklistCreate {
	wbc.mutation.SetWord(s)
	return wbc
}

// AddServerIDs adds the "server" edge to the Server entity by IDs.
func (wbc *WordBlacklistCreate) AddServerIDs(ids ...int) *WordBlacklistCreate {
	wbc.mutation.AddServerIDs(ids...)
	return wbc
}

// AddServer adds the "server" edges to the Server entity.
func (wbc *WordBlacklistCreate) AddServer(s ...*Server) *WordBlacklistCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return wbc.AddServerIDs(ids...)
}

// Mutation returns the WordBlacklistMutation object of the builder.
func (wbc *WordBlacklistCreate) Mutation() *WordBlacklistMutation {
	return wbc.mutation
}

// Save creates the WordBlacklist in the database.
func (wbc *WordBlacklistCreate) Save(ctx context.Context) (*WordBlacklist, error) {
	wbc.defaults()
	return withHooks(ctx, wbc.sqlSave, wbc.mutation, wbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wbc *WordBlacklistCreate) SaveX(ctx context.Context) *WordBlacklist {
	v, err := wbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wbc *WordBlacklistCreate) Exec(ctx context.Context) error {
	_, err := wbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wbc *WordBlacklistCreate) ExecX(ctx context.Context) {
	if err := wbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wbc *WordBlacklistCreate) defaults() {
	if _, ok := wbc.mutation.CreateTime(); !ok {
		v := wordblacklist.DefaultCreateTime()
		wbc.mutation.SetCreateTime(v)
	}
	if _, ok := wbc.mutation.UpdateTime(); !ok {
		v := wordblacklist.DefaultUpdateTime()
		wbc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wbc *WordBlacklistCreate) check() error {
	if _, ok := wbc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "WordBlacklist.create_time"`)}
	}
	if _, ok := wbc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "WordBlacklist.update_time"`)}
	}
	if _, ok := wbc.mutation.Word(); !ok {
		return &ValidationError{Name: "word", err: errors.New(`ent: missing required field "WordBlacklist.word"`)}
	}
	return nil
}

func (wbc *WordBlacklistCreate) sqlSave(ctx context.Context) (*WordBlacklist, error) {
	if err := wbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wbc.mutation.id = &_node.ID
	wbc.mutation.done = true
	return _node, nil
}

func (wbc *WordBlacklistCreate) createSpec() (*WordBlacklist, *sqlgraph.CreateSpec) {
	var (
		_node = &WordBlacklist{config: wbc.config}
		_spec = sqlgraph.NewCreateSpec(wordblacklist.Table, sqlgraph.NewFieldSpec(wordblacklist.FieldID, field.TypeInt))
	)
	_spec.OnConflict = wbc.conflict
	if value, ok := wbc.mutation.CreateTime(); ok {
		_spec.SetField(wordblacklist.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := wbc.mutation.UpdateTime(); ok {
		_spec.SetField(wordblacklist.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := wbc.mutation.Word(); ok {
		_spec.SetField(wordblacklist.FieldWord, field.TypeString, value)
		_node.Word = value
	}
	if nodes := wbc.mutation.ServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   wordblacklist.ServerTable,
			Columns: wordblacklist.ServerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WordBlacklist.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WordBlacklistUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (wbc *WordBlacklistCreate) OnConflict(opts ...sql.ConflictOption) *WordBlacklistUpsertOne {
	wbc.conflict = opts
	return &WordBlacklistUpsertOne{
		create: wbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WordBlacklist.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wbc *WordBlacklistCreate) OnConflictColumns(columns ...string) *WordBlacklistUpsertOne {
	wbc.conflict = append(wbc.conflict, sql.ConflictColumns(columns...))
	return &WordBlacklistUpsertOne{
		create: wbc,
	}
}

type (
	// WordBlacklistUpsertOne is the builder for "upsert"-ing
	//  one WordBlacklist node.
	WordBlacklistUpsertOne struct {
		create *WordBlacklistCreate
	}

	// WordBlacklistUpsert is the "OnConflict" setter.
	WordBlacklistUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *WordBlacklistUpsert) SetUpdateTime(v time.Time) *WordBlacklistUpsert {
	u.Set(wordblacklist.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WordBlacklistUpsert) UpdateUpdateTime() *WordBlacklistUpsert {
	u.SetExcluded(wordblacklist.FieldUpdateTime)
	return u
}

// SetWord sets the "word" field.
func (u *WordBlacklistUpsert) SetWord(v string) *WordBlacklistUpsert {
	u.Set(wordblacklist.FieldWord, v)
	return u
}

// UpdateWord sets the "word" field to the value that was provided on create.
func (u *WordBlacklistUpsert) UpdateWord() *WordBlacklistUpsert {
	u.SetExcluded(wordblacklist.FieldWord)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.WordBlacklist.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *WordBlacklistUpsertOne) UpdateNewValues() *WordBlacklistUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(wordblacklist.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WordBlacklist.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WordBlacklistUpsertOne) Ignore() *WordBlacklistUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WordBlacklistUpsertOne) DoNothing() *WordBlacklistUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WordBlacklistCreate.OnConflict
// documentation for more info.
func (u *WordBlacklistUpsertOne) Update(set func(*WordBlacklistUpsert)) *WordBlacklistUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WordBlacklistUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *WordBlacklistUpsertOne) SetUpdateTime(v time.Time) *WordBlacklistUpsertOne {
	return u.Update(func(s *WordBlacklistUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WordBlacklistUpsertOne) UpdateUpdateTime() *WordBlacklistUpsertOne {
	return u.Update(func(s *WordBlacklistUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetWord sets the "word" field.
func (u *WordBlacklistUpsertOne) SetWord(v string) *WordBlacklistUpsertOne {
	return u.Update(func(s *WordBlacklistUpsert) {
		s.SetWord(v)
	})
}

// UpdateWord sets the "word" field to the value that was provided on create.
func (u *WordBlacklistUpsertOne) UpdateWord() *WordBlacklistUpsertOne {
	return u.Update(func(s *WordBlacklistUpsert) {
		s.UpdateWord()
	})
}

// Exec executes the query.
func (u *WordBlacklistUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WordBlacklistCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WordBlacklistUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WordBlacklistUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WordBlacklistUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WordBlacklistCreateBulk is the builder for creating many WordBlacklist entities in bulk.
type WordBlacklistCreateBulk struct {
	config
	err      error
	builders []*WordBlacklistCreate
	conflict []sql.ConflictOption
}

// Save creates the WordBlacklist entities in the database.
func (wbcb *WordBlacklistCreateBulk) Save(ctx context.Context) ([]*WordBlacklist, error) {
	if wbcb.err != nil {
		return nil, wbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wbcb.builders))
	nodes := make([]*WordBlacklist, len(wbcb.builders))
	mutators := make([]Mutator, len(wbcb.builders))
	for i := range wbcb.builders {
		func(i int, root context.Context) {
			builder := wbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WordBlacklistMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wbcb *WordBlacklistCreateBulk) SaveX(ctx context.Context) []*WordBlacklist {
	v, err := wbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wbcb *WordBlacklistCreateBulk) Exec(ctx context.Context) error {
	_, err := wbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wbcb *WordBlacklistCreateBulk) ExecX(ctx context.Context) {
	if err := wbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WordBlacklist.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WordBlacklistUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (wbcb *WordBlacklistCreateBulk) OnConflict(opts ...sql.ConflictOption) *WordBlacklistUpsertBulk {
	wbcb.conflict = opts
	return &WordBlacklistUpsertBulk{
		create: wbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WordBlacklist.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wbcb *WordBlacklistCreateBulk) OnConflictColumns(columns ...string) *WordBlacklistUpsertBulk {
	wbcb.conflict = append(wbcb.conflict, sql.ConflictColumns(columns...))
	return &WordBlacklistUpsertBulk{
		create: wbcb,
	}
}

// WordBlacklistUpsertBulk is the builder for "upsert"-ing
// a bulk of WordBlacklist nodes.
type WordBlacklistUpsertBulk struct {
	create *WordBlacklistCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WordBlacklist.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *WordBlacklistUpsertBulk) UpdateNewValues() *WordBlacklistUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(wordblacklist.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WordBlacklist.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WordBlacklistUpsertBulk) Ignore() *WordBlacklistUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WordBlacklistUpsertBulk) DoNothing() *WordBlacklistUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WordBlacklistCreateBulk.OnConflict
// documentation for more info.
func (u *WordBlacklistUpsertBulk) Update(set func(*WordBlacklistUpsert)) *WordBlacklistUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WordBlacklistUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *WordBlacklistUpsertBulk) SetUpdateTime(v time.Time) *WordBlacklistUpsertBulk {
	return u.Update(func(s *WordBlacklistUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WordBlacklistUpsertBulk) UpdateUpdateTime() *WordBlacklistUpsertBulk {
	return u.Update(func(s *WordBlacklistUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetWord sets the "word" field.
func (u *WordBlacklistUpsertBulk) SetWord(v string) *WordBlacklistUpsertBulk {
	return u.Update(func(s *WordBlacklistUpsert) {
		s.SetWord(v)
	})
}

// UpdateWord sets the "word" field to the value that was provided on create.
func (u *WordBlacklistUpsertBulk) UpdateWord() *WordBlacklistUpsertBulk {
	return u.Update(func(s *WordBlacklistUpsert) {
		s.UpdateWord()
	})
}

// Exec executes the query.
func (u *WordBlacklistUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WordBlacklistCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WordBlacklistCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WordBlacklistUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
