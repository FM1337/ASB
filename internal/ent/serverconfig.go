// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/FM1337/ASB/internal/ent/serverconfig"
)

// ServerConfig is the model entity for the ServerConfig schema.
type ServerConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Indicates whether a spammer should have their roles removed
	RemoveRoles bool `json:"remove_roles,omitempty"`
	// Indicates if a role should be assigned to a spammer
	GiveRole bool `json:"give_role,omitempty"`
	// Indicates if a spammer should be timed out
	Timeout bool `json:"timeout,omitempty"`
	// Indicates if a spammer should be kicked (takes priority over timeout)
	Kick bool `json:"kick,omitempty"`
	// Indicates if a spammer should be banned (takes priority over kick)
	Ban bool `json:"ban,omitempty"`
	// Indicate if information about an invite should be checked against the blacklist
	CheckInvites bool `json:"check_invites,omitempty"`
	// Indicates if a url should be investigated
	CheckLinks bool `json:"check_links,omitempty"`
	// Indicates if ratelimiting is enabled to identify spammers
	Ratelimit bool `json:"ratelimit,omitempty"`
	// Indicates if an alert should be posted to the alert channel for a server when a spammer is detected
	Alerts bool `json:"alerts,omitempty"`
	// Indicates if a user should be monitored if they post a message containing a URL
	FlagLinks bool `json:"flag_links,omitempty"`
	// The alert/log channel for a server
	LogChannel string `json:"log_channel,omitempty"`
	// Channels listed should not be monitored for spammers
	ExcludedChannels []string `json:"excluded_channels,omitempty"`
	// Roles that should be ignored for spam checks
	ExcludedRoles []string `json:"excluded_roles,omitempty"`
	// Users that should be ignored for spam checks
	ExcludedUsers []string `json:"excluded_users,omitempty"`
	// The role to give to a spammer if give_role is true
	GivenRole string `json:"given_role,omitempty"`
	// The amount of times the same message can be sent within the rate limit period before being considered spam
	RatelimitMessage int `json:"ratelimit_message,omitempty"`
	// The ratelimit cooldown time, message tracking will be reset after this time period
	RatelimitTime serverconfig.RatelimitTime `json:"ratelimit_time,omitempty"`
	// The discord timeout time assigned to a spammer
	TimeoutTime serverconfig.TimeoutTime `json:"timeout_time,omitempty"`
	// The discord time to remove messages sent by a spammer
	BanDeleteMessageTime serverconfig.BanDeleteMessageTime `json:"ban_delete_message_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServerConfigQuery when eager-loading is set.
	Edges        ServerConfigEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ServerConfigEdges holds the relations/edges for other nodes in the graph.
type ServerConfigEdges struct {
	// Server holds the value of the server edge.
	Server []*Server `json:"server,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServerOrErr returns the Server value or an error if the edge
// was not loaded in eager-loading.
func (e ServerConfigEdges) ServerOrErr() ([]*Server, error) {
	if e.loadedTypes[0] {
		return e.Server, nil
	}
	return nil, &NotLoadedError{edge: "server"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServerConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case serverconfig.FieldExcludedChannels, serverconfig.FieldExcludedRoles, serverconfig.FieldExcludedUsers:
			values[i] = new([]byte)
		case serverconfig.FieldRemoveRoles, serverconfig.FieldGiveRole, serverconfig.FieldTimeout, serverconfig.FieldKick, serverconfig.FieldBan, serverconfig.FieldCheckInvites, serverconfig.FieldCheckLinks, serverconfig.FieldRatelimit, serverconfig.FieldAlerts, serverconfig.FieldFlagLinks:
			values[i] = new(sql.NullBool)
		case serverconfig.FieldID, serverconfig.FieldRatelimitMessage:
			values[i] = new(sql.NullInt64)
		case serverconfig.FieldLogChannel, serverconfig.FieldGivenRole, serverconfig.FieldRatelimitTime, serverconfig.FieldTimeoutTime, serverconfig.FieldBanDeleteMessageTime:
			values[i] = new(sql.NullString)
		case serverconfig.FieldCreateTime, serverconfig.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServerConfig fields.
func (sc *ServerConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serverconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sc.ID = int(value.Int64)
		case serverconfig.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sc.CreateTime = value.Time
			}
		case serverconfig.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sc.UpdateTime = value.Time
			}
		case serverconfig.FieldRemoveRoles:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field remove_roles", values[i])
			} else if value.Valid {
				sc.RemoveRoles = value.Bool
			}
		case serverconfig.FieldGiveRole:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field give_role", values[i])
			} else if value.Valid {
				sc.GiveRole = value.Bool
			}
		case serverconfig.FieldTimeout:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				sc.Timeout = value.Bool
			}
		case serverconfig.FieldKick:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field kick", values[i])
			} else if value.Valid {
				sc.Kick = value.Bool
			}
		case serverconfig.FieldBan:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ban", values[i])
			} else if value.Valid {
				sc.Ban = value.Bool
			}
		case serverconfig.FieldCheckInvites:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field check_invites", values[i])
			} else if value.Valid {
				sc.CheckInvites = value.Bool
			}
		case serverconfig.FieldCheckLinks:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field check_links", values[i])
			} else if value.Valid {
				sc.CheckLinks = value.Bool
			}
		case serverconfig.FieldRatelimit:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ratelimit", values[i])
			} else if value.Valid {
				sc.Ratelimit = value.Bool
			}
		case serverconfig.FieldAlerts:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field alerts", values[i])
			} else if value.Valid {
				sc.Alerts = value.Bool
			}
		case serverconfig.FieldFlagLinks:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field flag_links", values[i])
			} else if value.Valid {
				sc.FlagLinks = value.Bool
			}
		case serverconfig.FieldLogChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field log_channel", values[i])
			} else if value.Valid {
				sc.LogChannel = value.String
			}
		case serverconfig.FieldExcludedChannels:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field excluded_channels", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sc.ExcludedChannels); err != nil {
					return fmt.Errorf("unmarshal field excluded_channels: %w", err)
				}
			}
		case serverconfig.FieldExcludedRoles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field excluded_roles", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sc.ExcludedRoles); err != nil {
					return fmt.Errorf("unmarshal field excluded_roles: %w", err)
				}
			}
		case serverconfig.FieldExcludedUsers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field excluded_users", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sc.ExcludedUsers); err != nil {
					return fmt.Errorf("unmarshal field excluded_users: %w", err)
				}
			}
		case serverconfig.FieldGivenRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field given_role", values[i])
			} else if value.Valid {
				sc.GivenRole = value.String
			}
		case serverconfig.FieldRatelimitMessage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ratelimit_message", values[i])
			} else if value.Valid {
				sc.RatelimitMessage = int(value.Int64)
			}
		case serverconfig.FieldRatelimitTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ratelimit_time", values[i])
			} else if value.Valid {
				sc.RatelimitTime = serverconfig.RatelimitTime(value.String)
			}
		case serverconfig.FieldTimeoutTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timeout_time", values[i])
			} else if value.Valid {
				sc.TimeoutTime = serverconfig.TimeoutTime(value.String)
			}
		case serverconfig.FieldBanDeleteMessageTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ban_delete_message_time", values[i])
			} else if value.Valid {
				sc.BanDeleteMessageTime = serverconfig.BanDeleteMessageTime(value.String)
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServerConfig.
// This includes values selected through modifiers, order, etc.
func (sc *ServerConfig) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// QueryServer queries the "server" edge of the ServerConfig entity.
func (sc *ServerConfig) QueryServer() *ServerQuery {
	return NewServerConfigClient(sc.config).QueryServer(sc)
}

// Update returns a builder for updating this ServerConfig.
// Note that you need to call ServerConfig.Unwrap() before calling this method if this ServerConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *ServerConfig) Update() *ServerConfigUpdateOne {
	return NewServerConfigClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the ServerConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *ServerConfig) Unwrap() *ServerConfig {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServerConfig is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *ServerConfig) String() string {
	var builder strings.Builder
	builder.WriteString("ServerConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("create_time=")
	builder.WriteString(sc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(sc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("remove_roles=")
	builder.WriteString(fmt.Sprintf("%v", sc.RemoveRoles))
	builder.WriteString(", ")
	builder.WriteString("give_role=")
	builder.WriteString(fmt.Sprintf("%v", sc.GiveRole))
	builder.WriteString(", ")
	builder.WriteString("timeout=")
	builder.WriteString(fmt.Sprintf("%v", sc.Timeout))
	builder.WriteString(", ")
	builder.WriteString("kick=")
	builder.WriteString(fmt.Sprintf("%v", sc.Kick))
	builder.WriteString(", ")
	builder.WriteString("ban=")
	builder.WriteString(fmt.Sprintf("%v", sc.Ban))
	builder.WriteString(", ")
	builder.WriteString("check_invites=")
	builder.WriteString(fmt.Sprintf("%v", sc.CheckInvites))
	builder.WriteString(", ")
	builder.WriteString("check_links=")
	builder.WriteString(fmt.Sprintf("%v", sc.CheckLinks))
	builder.WriteString(", ")
	builder.WriteString("ratelimit=")
	builder.WriteString(fmt.Sprintf("%v", sc.Ratelimit))
	builder.WriteString(", ")
	builder.WriteString("alerts=")
	builder.WriteString(fmt.Sprintf("%v", sc.Alerts))
	builder.WriteString(", ")
	builder.WriteString("flag_links=")
	builder.WriteString(fmt.Sprintf("%v", sc.FlagLinks))
	builder.WriteString(", ")
	builder.WriteString("log_channel=")
	builder.WriteString(sc.LogChannel)
	builder.WriteString(", ")
	builder.WriteString("excluded_channels=")
	builder.WriteString(fmt.Sprintf("%v", sc.ExcludedChannels))
	builder.WriteString(", ")
	builder.WriteString("excluded_roles=")
	builder.WriteString(fmt.Sprintf("%v", sc.ExcludedRoles))
	builder.WriteString(", ")
	builder.WriteString("excluded_users=")
	builder.WriteString(fmt.Sprintf("%v", sc.ExcludedUsers))
	builder.WriteString(", ")
	builder.WriteString("given_role=")
	builder.WriteString(sc.GivenRole)
	builder.WriteString(", ")
	builder.WriteString("ratelimit_message=")
	builder.WriteString(fmt.Sprintf("%v", sc.RatelimitMessage))
	builder.WriteString(", ")
	builder.WriteString("ratelimit_time=")
	builder.WriteString(fmt.Sprintf("%v", sc.RatelimitTime))
	builder.WriteString(", ")
	builder.WriteString("timeout_time=")
	builder.WriteString(fmt.Sprintf("%v", sc.TimeoutTime))
	builder.WriteString(", ")
	builder.WriteString("ban_delete_message_time=")
	builder.WriteString(fmt.Sprintf("%v", sc.BanDeleteMessageTime))
	builder.WriteByte(')')
	return builder.String()
}

// ServerConfigs is a parsable slice of ServerConfig.
type ServerConfigs []*ServerConfig
