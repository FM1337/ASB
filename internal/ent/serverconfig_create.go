// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/FM1337/ASB/internal/ent/server"
	"github.com/FM1337/ASB/internal/ent/serverconfig"
)

// ServerConfigCreate is the builder for creating a ServerConfig entity.
type ServerConfigCreate struct {
	config
	mutation *ServerConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (scc *ServerConfigCreate) SetCreateTime(t time.Time) *ServerConfigCreate {
	scc.mutation.SetCreateTime(t)
	return scc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (scc *ServerConfigCreate) SetNillableCreateTime(t *time.Time) *ServerConfigCreate {
	if t != nil {
		scc.SetCreateTime(*t)
	}
	return scc
}

// SetUpdateTime sets the "update_time" field.
func (scc *ServerConfigCreate) SetUpdateTime(t time.Time) *ServerConfigCreate {
	scc.mutation.SetUpdateTime(t)
	return scc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (scc *ServerConfigCreate) SetNillableUpdateTime(t *time.Time) *ServerConfigCreate {
	if t != nil {
		scc.SetUpdateTime(*t)
	}
	return scc
}

// SetRemoveRoles sets the "remove_roles" field.
func (scc *ServerConfigCreate) SetRemoveRoles(b bool) *ServerConfigCreate {
	scc.mutation.SetRemoveRoles(b)
	return scc
}

// SetNillableRemoveRoles sets the "remove_roles" field if the given value is not nil.
func (scc *ServerConfigCreate) SetNillableRemoveRoles(b *bool) *ServerConfigCreate {
	if b != nil {
		scc.SetRemoveRoles(*b)
	}
	return scc
}

// SetGiveRole sets the "give_role" field.
func (scc *ServerConfigCreate) SetGiveRole(b bool) *ServerConfigCreate {
	scc.mutation.SetGiveRole(b)
	return scc
}

// SetNillableGiveRole sets the "give_role" field if the given value is not nil.
func (scc *ServerConfigCreate) SetNillableGiveRole(b *bool) *ServerConfigCreate {
	if b != nil {
		scc.SetGiveRole(*b)
	}
	return scc
}

// SetTimeout sets the "timeout" field.
func (scc *ServerConfigCreate) SetTimeout(b bool) *ServerConfigCreate {
	scc.mutation.SetTimeout(b)
	return scc
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (scc *ServerConfigCreate) SetNillableTimeout(b *bool) *ServerConfigCreate {
	if b != nil {
		scc.SetTimeout(*b)
	}
	return scc
}

// SetKick sets the "kick" field.
func (scc *ServerConfigCreate) SetKick(b bool) *ServerConfigCreate {
	scc.mutation.SetKick(b)
	return scc
}

// SetNillableKick sets the "kick" field if the given value is not nil.
func (scc *ServerConfigCreate) SetNillableKick(b *bool) *ServerConfigCreate {
	if b != nil {
		scc.SetKick(*b)
	}
	return scc
}

// SetBan sets the "ban" field.
func (scc *ServerConfigCreate) SetBan(b bool) *ServerConfigCreate {
	scc.mutation.SetBan(b)
	return scc
}

// SetNillableBan sets the "ban" field if the given value is not nil.
func (scc *ServerConfigCreate) SetNillableBan(b *bool) *ServerConfigCreate {
	if b != nil {
		scc.SetBan(*b)
	}
	return scc
}

// SetCheckInvites sets the "check_invites" field.
func (scc *ServerConfigCreate) SetCheckInvites(b bool) *ServerConfigCreate {
	scc.mutation.SetCheckInvites(b)
	return scc
}

// SetNillableCheckInvites sets the "check_invites" field if the given value is not nil.
func (scc *ServerConfigCreate) SetNillableCheckInvites(b *bool) *ServerConfigCreate {
	if b != nil {
		scc.SetCheckInvites(*b)
	}
	return scc
}

// SetCheckLinks sets the "check_links" field.
func (scc *ServerConfigCreate) SetCheckLinks(b bool) *ServerConfigCreate {
	scc.mutation.SetCheckLinks(b)
	return scc
}

// SetNillableCheckLinks sets the "check_links" field if the given value is not nil.
func (scc *ServerConfigCreate) SetNillableCheckLinks(b *bool) *ServerConfigCreate {
	if b != nil {
		scc.SetCheckLinks(*b)
	}
	return scc
}

// SetRatelimit sets the "ratelimit" field.
func (scc *ServerConfigCreate) SetRatelimit(b bool) *ServerConfigCreate {
	scc.mutation.SetRatelimit(b)
	return scc
}

// SetNillableRatelimit sets the "ratelimit" field if the given value is not nil.
func (scc *ServerConfigCreate) SetNillableRatelimit(b *bool) *ServerConfigCreate {
	if b != nil {
		scc.SetRatelimit(*b)
	}
	return scc
}

// SetAlerts sets the "alerts" field.
func (scc *ServerConfigCreate) SetAlerts(b bool) *ServerConfigCreate {
	scc.mutation.SetAlerts(b)
	return scc
}

// SetNillableAlerts sets the "alerts" field if the given value is not nil.
func (scc *ServerConfigCreate) SetNillableAlerts(b *bool) *ServerConfigCreate {
	if b != nil {
		scc.SetAlerts(*b)
	}
	return scc
}

// SetFlagLinks sets the "flag_links" field.
func (scc *ServerConfigCreate) SetFlagLinks(b bool) *ServerConfigCreate {
	scc.mutation.SetFlagLinks(b)
	return scc
}

// SetNillableFlagLinks sets the "flag_links" field if the given value is not nil.
func (scc *ServerConfigCreate) SetNillableFlagLinks(b *bool) *ServerConfigCreate {
	if b != nil {
		scc.SetFlagLinks(*b)
	}
	return scc
}

// SetLogChannel sets the "log_channel" field.
func (scc *ServerConfigCreate) SetLogChannel(s string) *ServerConfigCreate {
	scc.mutation.SetLogChannel(s)
	return scc
}

// SetExcludedChannels sets the "excluded_channels" field.
func (scc *ServerConfigCreate) SetExcludedChannels(s []string) *ServerConfigCreate {
	scc.mutation.SetExcludedChannels(s)
	return scc
}

// SetExcludedRoles sets the "excluded_roles" field.
func (scc *ServerConfigCreate) SetExcludedRoles(s []string) *ServerConfigCreate {
	scc.mutation.SetExcludedRoles(s)
	return scc
}

// SetExcludedUsers sets the "excluded_users" field.
func (scc *ServerConfigCreate) SetExcludedUsers(s []string) *ServerConfigCreate {
	scc.mutation.SetExcludedUsers(s)
	return scc
}

// SetGivenRole sets the "given_role" field.
func (scc *ServerConfigCreate) SetGivenRole(s string) *ServerConfigCreate {
	scc.mutation.SetGivenRole(s)
	return scc
}

// SetRatelimitMessage sets the "ratelimit_message" field.
func (scc *ServerConfigCreate) SetRatelimitMessage(i int) *ServerConfigCreate {
	scc.mutation.SetRatelimitMessage(i)
	return scc
}

// SetNillableRatelimitMessage sets the "ratelimit_message" field if the given value is not nil.
func (scc *ServerConfigCreate) SetNillableRatelimitMessage(i *int) *ServerConfigCreate {
	if i != nil {
		scc.SetRatelimitMessage(*i)
	}
	return scc
}

// SetRatelimitTime sets the "ratelimit_time" field.
func (scc *ServerConfigCreate) SetRatelimitTime(st serverconfig.RatelimitTime) *ServerConfigCreate {
	scc.mutation.SetRatelimitTime(st)
	return scc
}

// SetNillableRatelimitTime sets the "ratelimit_time" field if the given value is not nil.
func (scc *ServerConfigCreate) SetNillableRatelimitTime(st *serverconfig.RatelimitTime) *ServerConfigCreate {
	if st != nil {
		scc.SetRatelimitTime(*st)
	}
	return scc
}

// SetTimeoutTime sets the "timeout_time" field.
func (scc *ServerConfigCreate) SetTimeoutTime(st serverconfig.TimeoutTime) *ServerConfigCreate {
	scc.mutation.SetTimeoutTime(st)
	return scc
}

// SetNillableTimeoutTime sets the "timeout_time" field if the given value is not nil.
func (scc *ServerConfigCreate) SetNillableTimeoutTime(st *serverconfig.TimeoutTime) *ServerConfigCreate {
	if st != nil {
		scc.SetTimeoutTime(*st)
	}
	return scc
}

// SetBanDeleteMessageTime sets the "ban_delete_message_time" field.
func (scc *ServerConfigCreate) SetBanDeleteMessageTime(sdmt serverconfig.BanDeleteMessageTime) *ServerConfigCreate {
	scc.mutation.SetBanDeleteMessageTime(sdmt)
	return scc
}

// SetNillableBanDeleteMessageTime sets the "ban_delete_message_time" field if the given value is not nil.
func (scc *ServerConfigCreate) SetNillableBanDeleteMessageTime(sdmt *serverconfig.BanDeleteMessageTime) *ServerConfigCreate {
	if sdmt != nil {
		scc.SetBanDeleteMessageTime(*sdmt)
	}
	return scc
}

// AddServerIDs adds the "server" edge to the Server entity by IDs.
func (scc *ServerConfigCreate) AddServerIDs(ids ...string) *ServerConfigCreate {
	scc.mutation.AddServerIDs(ids...)
	return scc
}

// AddServer adds the "server" edges to the Server entity.
func (scc *ServerConfigCreate) AddServer(s ...*Server) *ServerConfigCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scc.AddServerIDs(ids...)
}

// Mutation returns the ServerConfigMutation object of the builder.
func (scc *ServerConfigCreate) Mutation() *ServerConfigMutation {
	return scc.mutation
}

// Save creates the ServerConfig in the database.
func (scc *ServerConfigCreate) Save(ctx context.Context) (*ServerConfig, error) {
	scc.defaults()
	return withHooks(ctx, scc.sqlSave, scc.mutation, scc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scc *ServerConfigCreate) SaveX(ctx context.Context) *ServerConfig {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *ServerConfigCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *ServerConfigCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *ServerConfigCreate) defaults() {
	if _, ok := scc.mutation.CreateTime(); !ok {
		v := serverconfig.DefaultCreateTime()
		scc.mutation.SetCreateTime(v)
	}
	if _, ok := scc.mutation.UpdateTime(); !ok {
		v := serverconfig.DefaultUpdateTime()
		scc.mutation.SetUpdateTime(v)
	}
	if _, ok := scc.mutation.RemoveRoles(); !ok {
		v := serverconfig.DefaultRemoveRoles
		scc.mutation.SetRemoveRoles(v)
	}
	if _, ok := scc.mutation.GiveRole(); !ok {
		v := serverconfig.DefaultGiveRole
		scc.mutation.SetGiveRole(v)
	}
	if _, ok := scc.mutation.Timeout(); !ok {
		v := serverconfig.DefaultTimeout
		scc.mutation.SetTimeout(v)
	}
	if _, ok := scc.mutation.Kick(); !ok {
		v := serverconfig.DefaultKick
		scc.mutation.SetKick(v)
	}
	if _, ok := scc.mutation.Ban(); !ok {
		v := serverconfig.DefaultBan
		scc.mutation.SetBan(v)
	}
	if _, ok := scc.mutation.CheckInvites(); !ok {
		v := serverconfig.DefaultCheckInvites
		scc.mutation.SetCheckInvites(v)
	}
	if _, ok := scc.mutation.CheckLinks(); !ok {
		v := serverconfig.DefaultCheckLinks
		scc.mutation.SetCheckLinks(v)
	}
	if _, ok := scc.mutation.Ratelimit(); !ok {
		v := serverconfig.DefaultRatelimit
		scc.mutation.SetRatelimit(v)
	}
	if _, ok := scc.mutation.Alerts(); !ok {
		v := serverconfig.DefaultAlerts
		scc.mutation.SetAlerts(v)
	}
	if _, ok := scc.mutation.FlagLinks(); !ok {
		v := serverconfig.DefaultFlagLinks
		scc.mutation.SetFlagLinks(v)
	}
	if _, ok := scc.mutation.RatelimitMessage(); !ok {
		v := serverconfig.DefaultRatelimitMessage
		scc.mutation.SetRatelimitMessage(v)
	}
	if _, ok := scc.mutation.RatelimitTime(); !ok {
		v := serverconfig.DefaultRatelimitTime
		scc.mutation.SetRatelimitTime(v)
	}
	if _, ok := scc.mutation.TimeoutTime(); !ok {
		v := serverconfig.DefaultTimeoutTime
		scc.mutation.SetTimeoutTime(v)
	}
	if _, ok := scc.mutation.BanDeleteMessageTime(); !ok {
		v := serverconfig.DefaultBanDeleteMessageTime
		scc.mutation.SetBanDeleteMessageTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *ServerConfigCreate) check() error {
	if _, ok := scc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ServerConfig.create_time"`)}
	}
	if _, ok := scc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ServerConfig.update_time"`)}
	}
	if _, ok := scc.mutation.RemoveRoles(); !ok {
		return &ValidationError{Name: "remove_roles", err: errors.New(`ent: missing required field "ServerConfig.remove_roles"`)}
	}
	if _, ok := scc.mutation.GiveRole(); !ok {
		return &ValidationError{Name: "give_role", err: errors.New(`ent: missing required field "ServerConfig.give_role"`)}
	}
	if _, ok := scc.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New(`ent: missing required field "ServerConfig.timeout"`)}
	}
	if _, ok := scc.mutation.Kick(); !ok {
		return &ValidationError{Name: "kick", err: errors.New(`ent: missing required field "ServerConfig.kick"`)}
	}
	if _, ok := scc.mutation.Ban(); !ok {
		return &ValidationError{Name: "ban", err: errors.New(`ent: missing required field "ServerConfig.ban"`)}
	}
	if _, ok := scc.mutation.CheckInvites(); !ok {
		return &ValidationError{Name: "check_invites", err: errors.New(`ent: missing required field "ServerConfig.check_invites"`)}
	}
	if _, ok := scc.mutation.CheckLinks(); !ok {
		return &ValidationError{Name: "check_links", err: errors.New(`ent: missing required field "ServerConfig.check_links"`)}
	}
	if _, ok := scc.mutation.Ratelimit(); !ok {
		return &ValidationError{Name: "ratelimit", err: errors.New(`ent: missing required field "ServerConfig.ratelimit"`)}
	}
	if _, ok := scc.mutation.Alerts(); !ok {
		return &ValidationError{Name: "alerts", err: errors.New(`ent: missing required field "ServerConfig.alerts"`)}
	}
	if _, ok := scc.mutation.FlagLinks(); !ok {
		return &ValidationError{Name: "flag_links", err: errors.New(`ent: missing required field "ServerConfig.flag_links"`)}
	}
	if _, ok := scc.mutation.LogChannel(); !ok {
		return &ValidationError{Name: "log_channel", err: errors.New(`ent: missing required field "ServerConfig.log_channel"`)}
	}
	if _, ok := scc.mutation.ExcludedChannels(); !ok {
		return &ValidationError{Name: "excluded_channels", err: errors.New(`ent: missing required field "ServerConfig.excluded_channels"`)}
	}
	if _, ok := scc.mutation.ExcludedRoles(); !ok {
		return &ValidationError{Name: "excluded_roles", err: errors.New(`ent: missing required field "ServerConfig.excluded_roles"`)}
	}
	if _, ok := scc.mutation.ExcludedUsers(); !ok {
		return &ValidationError{Name: "excluded_users", err: errors.New(`ent: missing required field "ServerConfig.excluded_users"`)}
	}
	if _, ok := scc.mutation.GivenRole(); !ok {
		return &ValidationError{Name: "given_role", err: errors.New(`ent: missing required field "ServerConfig.given_role"`)}
	}
	if _, ok := scc.mutation.RatelimitMessage(); !ok {
		return &ValidationError{Name: "ratelimit_message", err: errors.New(`ent: missing required field "ServerConfig.ratelimit_message"`)}
	}
	if _, ok := scc.mutation.RatelimitTime(); !ok {
		return &ValidationError{Name: "ratelimit_time", err: errors.New(`ent: missing required field "ServerConfig.ratelimit_time"`)}
	}
	if v, ok := scc.mutation.RatelimitTime(); ok {
		if err := serverconfig.RatelimitTimeValidator(v); err != nil {
			return &ValidationError{Name: "ratelimit_time", err: fmt.Errorf(`ent: validator failed for field "ServerConfig.ratelimit_time": %w`, err)}
		}
	}
	if _, ok := scc.mutation.TimeoutTime(); !ok {
		return &ValidationError{Name: "timeout_time", err: errors.New(`ent: missing required field "ServerConfig.timeout_time"`)}
	}
	if v, ok := scc.mutation.TimeoutTime(); ok {
		if err := serverconfig.TimeoutTimeValidator(v); err != nil {
			return &ValidationError{Name: "timeout_time", err: fmt.Errorf(`ent: validator failed for field "ServerConfig.timeout_time": %w`, err)}
		}
	}
	if _, ok := scc.mutation.BanDeleteMessageTime(); !ok {
		return &ValidationError{Name: "ban_delete_message_time", err: errors.New(`ent: missing required field "ServerConfig.ban_delete_message_time"`)}
	}
	if v, ok := scc.mutation.BanDeleteMessageTime(); ok {
		if err := serverconfig.BanDeleteMessageTimeValidator(v); err != nil {
			return &ValidationError{Name: "ban_delete_message_time", err: fmt.Errorf(`ent: validator failed for field "ServerConfig.ban_delete_message_time": %w`, err)}
		}
	}
	return nil
}

func (scc *ServerConfigCreate) sqlSave(ctx context.Context) (*ServerConfig, error) {
	if err := scc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	scc.mutation.id = &_node.ID
	scc.mutation.done = true
	return _node, nil
}

func (scc *ServerConfigCreate) createSpec() (*ServerConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &ServerConfig{config: scc.config}
		_spec = sqlgraph.NewCreateSpec(serverconfig.Table, sqlgraph.NewFieldSpec(serverconfig.FieldID, field.TypeInt))
	)
	_spec.OnConflict = scc.conflict
	if value, ok := scc.mutation.CreateTime(); ok {
		_spec.SetField(serverconfig.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := scc.mutation.UpdateTime(); ok {
		_spec.SetField(serverconfig.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := scc.mutation.RemoveRoles(); ok {
		_spec.SetField(serverconfig.FieldRemoveRoles, field.TypeBool, value)
		_node.RemoveRoles = value
	}
	if value, ok := scc.mutation.GiveRole(); ok {
		_spec.SetField(serverconfig.FieldGiveRole, field.TypeBool, value)
		_node.GiveRole = value
	}
	if value, ok := scc.mutation.Timeout(); ok {
		_spec.SetField(serverconfig.FieldTimeout, field.TypeBool, value)
		_node.Timeout = value
	}
	if value, ok := scc.mutation.Kick(); ok {
		_spec.SetField(serverconfig.FieldKick, field.TypeBool, value)
		_node.Kick = value
	}
	if value, ok := scc.mutation.Ban(); ok {
		_spec.SetField(serverconfig.FieldBan, field.TypeBool, value)
		_node.Ban = value
	}
	if value, ok := scc.mutation.CheckInvites(); ok {
		_spec.SetField(serverconfig.FieldCheckInvites, field.TypeBool, value)
		_node.CheckInvites = value
	}
	if value, ok := scc.mutation.CheckLinks(); ok {
		_spec.SetField(serverconfig.FieldCheckLinks, field.TypeBool, value)
		_node.CheckLinks = value
	}
	if value, ok := scc.mutation.Ratelimit(); ok {
		_spec.SetField(serverconfig.FieldRatelimit, field.TypeBool, value)
		_node.Ratelimit = value
	}
	if value, ok := scc.mutation.Alerts(); ok {
		_spec.SetField(serverconfig.FieldAlerts, field.TypeBool, value)
		_node.Alerts = value
	}
	if value, ok := scc.mutation.FlagLinks(); ok {
		_spec.SetField(serverconfig.FieldFlagLinks, field.TypeBool, value)
		_node.FlagLinks = value
	}
	if value, ok := scc.mutation.LogChannel(); ok {
		_spec.SetField(serverconfig.FieldLogChannel, field.TypeString, value)
		_node.LogChannel = value
	}
	if value, ok := scc.mutation.ExcludedChannels(); ok {
		_spec.SetField(serverconfig.FieldExcludedChannels, field.TypeJSON, value)
		_node.ExcludedChannels = value
	}
	if value, ok := scc.mutation.ExcludedRoles(); ok {
		_spec.SetField(serverconfig.FieldExcludedRoles, field.TypeJSON, value)
		_node.ExcludedRoles = value
	}
	if value, ok := scc.mutation.ExcludedUsers(); ok {
		_spec.SetField(serverconfig.FieldExcludedUsers, field.TypeJSON, value)
		_node.ExcludedUsers = value
	}
	if value, ok := scc.mutation.GivenRole(); ok {
		_spec.SetField(serverconfig.FieldGivenRole, field.TypeString, value)
		_node.GivenRole = value
	}
	if value, ok := scc.mutation.RatelimitMessage(); ok {
		_spec.SetField(serverconfig.FieldRatelimitMessage, field.TypeInt, value)
		_node.RatelimitMessage = value
	}
	if value, ok := scc.mutation.RatelimitTime(); ok {
		_spec.SetField(serverconfig.FieldRatelimitTime, field.TypeEnum, value)
		_node.RatelimitTime = value
	}
	if value, ok := scc.mutation.TimeoutTime(); ok {
		_spec.SetField(serverconfig.FieldTimeoutTime, field.TypeEnum, value)
		_node.TimeoutTime = value
	}
	if value, ok := scc.mutation.BanDeleteMessageTime(); ok {
		_spec.SetField(serverconfig.FieldBanDeleteMessageTime, field.TypeEnum, value)
		_node.BanDeleteMessageTime = value
	}
	if nodes := scc.mutation.ServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   serverconfig.ServerTable,
			Columns: []string{serverconfig.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ServerConfig.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServerConfigUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (scc *ServerConfigCreate) OnConflict(opts ...sql.ConflictOption) *ServerConfigUpsertOne {
	scc.conflict = opts
	return &ServerConfigUpsertOne{
		create: scc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ServerConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scc *ServerConfigCreate) OnConflictColumns(columns ...string) *ServerConfigUpsertOne {
	scc.conflict = append(scc.conflict, sql.ConflictColumns(columns...))
	return &ServerConfigUpsertOne{
		create: scc,
	}
}

type (
	// ServerConfigUpsertOne is the builder for "upsert"-ing
	//  one ServerConfig node.
	ServerConfigUpsertOne struct {
		create *ServerConfigCreate
	}

	// ServerConfigUpsert is the "OnConflict" setter.
	ServerConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *ServerConfigUpsert) SetUpdateTime(v time.Time) *ServerConfigUpsert {
	u.Set(serverconfig.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateUpdateTime() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldUpdateTime)
	return u
}

// SetRemoveRoles sets the "remove_roles" field.
func (u *ServerConfigUpsert) SetRemoveRoles(v bool) *ServerConfigUpsert {
	u.Set(serverconfig.FieldRemoveRoles, v)
	return u
}

// UpdateRemoveRoles sets the "remove_roles" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateRemoveRoles() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldRemoveRoles)
	return u
}

// SetGiveRole sets the "give_role" field.
func (u *ServerConfigUpsert) SetGiveRole(v bool) *ServerConfigUpsert {
	u.Set(serverconfig.FieldGiveRole, v)
	return u
}

// UpdateGiveRole sets the "give_role" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateGiveRole() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldGiveRole)
	return u
}

// SetTimeout sets the "timeout" field.
func (u *ServerConfigUpsert) SetTimeout(v bool) *ServerConfigUpsert {
	u.Set(serverconfig.FieldTimeout, v)
	return u
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateTimeout() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldTimeout)
	return u
}

// SetKick sets the "kick" field.
func (u *ServerConfigUpsert) SetKick(v bool) *ServerConfigUpsert {
	u.Set(serverconfig.FieldKick, v)
	return u
}

// UpdateKick sets the "kick" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateKick() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldKick)
	return u
}

// SetBan sets the "ban" field.
func (u *ServerConfigUpsert) SetBan(v bool) *ServerConfigUpsert {
	u.Set(serverconfig.FieldBan, v)
	return u
}

// UpdateBan sets the "ban" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateBan() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldBan)
	return u
}

// SetCheckInvites sets the "check_invites" field.
func (u *ServerConfigUpsert) SetCheckInvites(v bool) *ServerConfigUpsert {
	u.Set(serverconfig.FieldCheckInvites, v)
	return u
}

// UpdateCheckInvites sets the "check_invites" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateCheckInvites() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldCheckInvites)
	return u
}

// SetCheckLinks sets the "check_links" field.
func (u *ServerConfigUpsert) SetCheckLinks(v bool) *ServerConfigUpsert {
	u.Set(serverconfig.FieldCheckLinks, v)
	return u
}

// UpdateCheckLinks sets the "check_links" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateCheckLinks() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldCheckLinks)
	return u
}

// SetRatelimit sets the "ratelimit" field.
func (u *ServerConfigUpsert) SetRatelimit(v bool) *ServerConfigUpsert {
	u.Set(serverconfig.FieldRatelimit, v)
	return u
}

// UpdateRatelimit sets the "ratelimit" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateRatelimit() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldRatelimit)
	return u
}

// SetAlerts sets the "alerts" field.
func (u *ServerConfigUpsert) SetAlerts(v bool) *ServerConfigUpsert {
	u.Set(serverconfig.FieldAlerts, v)
	return u
}

// UpdateAlerts sets the "alerts" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateAlerts() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldAlerts)
	return u
}

// SetFlagLinks sets the "flag_links" field.
func (u *ServerConfigUpsert) SetFlagLinks(v bool) *ServerConfigUpsert {
	u.Set(serverconfig.FieldFlagLinks, v)
	return u
}

// UpdateFlagLinks sets the "flag_links" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateFlagLinks() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldFlagLinks)
	return u
}

// SetLogChannel sets the "log_channel" field.
func (u *ServerConfigUpsert) SetLogChannel(v string) *ServerConfigUpsert {
	u.Set(serverconfig.FieldLogChannel, v)
	return u
}

// UpdateLogChannel sets the "log_channel" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateLogChannel() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldLogChannel)
	return u
}

// SetExcludedChannels sets the "excluded_channels" field.
func (u *ServerConfigUpsert) SetExcludedChannels(v []string) *ServerConfigUpsert {
	u.Set(serverconfig.FieldExcludedChannels, v)
	return u
}

// UpdateExcludedChannels sets the "excluded_channels" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateExcludedChannels() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldExcludedChannels)
	return u
}

// SetExcludedRoles sets the "excluded_roles" field.
func (u *ServerConfigUpsert) SetExcludedRoles(v []string) *ServerConfigUpsert {
	u.Set(serverconfig.FieldExcludedRoles, v)
	return u
}

// UpdateExcludedRoles sets the "excluded_roles" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateExcludedRoles() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldExcludedRoles)
	return u
}

// SetExcludedUsers sets the "excluded_users" field.
func (u *ServerConfigUpsert) SetExcludedUsers(v []string) *ServerConfigUpsert {
	u.Set(serverconfig.FieldExcludedUsers, v)
	return u
}

// UpdateExcludedUsers sets the "excluded_users" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateExcludedUsers() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldExcludedUsers)
	return u
}

// SetGivenRole sets the "given_role" field.
func (u *ServerConfigUpsert) SetGivenRole(v string) *ServerConfigUpsert {
	u.Set(serverconfig.FieldGivenRole, v)
	return u
}

// UpdateGivenRole sets the "given_role" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateGivenRole() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldGivenRole)
	return u
}

// SetRatelimitMessage sets the "ratelimit_message" field.
func (u *ServerConfigUpsert) SetRatelimitMessage(v int) *ServerConfigUpsert {
	u.Set(serverconfig.FieldRatelimitMessage, v)
	return u
}

// UpdateRatelimitMessage sets the "ratelimit_message" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateRatelimitMessage() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldRatelimitMessage)
	return u
}

// AddRatelimitMessage adds v to the "ratelimit_message" field.
func (u *ServerConfigUpsert) AddRatelimitMessage(v int) *ServerConfigUpsert {
	u.Add(serverconfig.FieldRatelimitMessage, v)
	return u
}

// SetRatelimitTime sets the "ratelimit_time" field.
func (u *ServerConfigUpsert) SetRatelimitTime(v serverconfig.RatelimitTime) *ServerConfigUpsert {
	u.Set(serverconfig.FieldRatelimitTime, v)
	return u
}

// UpdateRatelimitTime sets the "ratelimit_time" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateRatelimitTime() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldRatelimitTime)
	return u
}

// SetTimeoutTime sets the "timeout_time" field.
func (u *ServerConfigUpsert) SetTimeoutTime(v serverconfig.TimeoutTime) *ServerConfigUpsert {
	u.Set(serverconfig.FieldTimeoutTime, v)
	return u
}

// UpdateTimeoutTime sets the "timeout_time" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateTimeoutTime() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldTimeoutTime)
	return u
}

// SetBanDeleteMessageTime sets the "ban_delete_message_time" field.
func (u *ServerConfigUpsert) SetBanDeleteMessageTime(v serverconfig.BanDeleteMessageTime) *ServerConfigUpsert {
	u.Set(serverconfig.FieldBanDeleteMessageTime, v)
	return u
}

// UpdateBanDeleteMessageTime sets the "ban_delete_message_time" field to the value that was provided on create.
func (u *ServerConfigUpsert) UpdateBanDeleteMessageTime() *ServerConfigUpsert {
	u.SetExcluded(serverconfig.FieldBanDeleteMessageTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ServerConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ServerConfigUpsertOne) UpdateNewValues() *ServerConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(serverconfig.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ServerConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ServerConfigUpsertOne) Ignore() *ServerConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServerConfigUpsertOne) DoNothing() *ServerConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServerConfigCreate.OnConflict
// documentation for more info.
func (u *ServerConfigUpsertOne) Update(set func(*ServerConfigUpsert)) *ServerConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServerConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *ServerConfigUpsertOne) SetUpdateTime(v time.Time) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateUpdateTime() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetRemoveRoles sets the "remove_roles" field.
func (u *ServerConfigUpsertOne) SetRemoveRoles(v bool) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetRemoveRoles(v)
	})
}

// UpdateRemoveRoles sets the "remove_roles" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateRemoveRoles() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateRemoveRoles()
	})
}

// SetGiveRole sets the "give_role" field.
func (u *ServerConfigUpsertOne) SetGiveRole(v bool) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetGiveRole(v)
	})
}

// UpdateGiveRole sets the "give_role" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateGiveRole() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateGiveRole()
	})
}

// SetTimeout sets the "timeout" field.
func (u *ServerConfigUpsertOne) SetTimeout(v bool) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateTimeout() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateTimeout()
	})
}

// SetKick sets the "kick" field.
func (u *ServerConfigUpsertOne) SetKick(v bool) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetKick(v)
	})
}

// UpdateKick sets the "kick" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateKick() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateKick()
	})
}

// SetBan sets the "ban" field.
func (u *ServerConfigUpsertOne) SetBan(v bool) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetBan(v)
	})
}

// UpdateBan sets the "ban" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateBan() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateBan()
	})
}

// SetCheckInvites sets the "check_invites" field.
func (u *ServerConfigUpsertOne) SetCheckInvites(v bool) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetCheckInvites(v)
	})
}

// UpdateCheckInvites sets the "check_invites" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateCheckInvites() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateCheckInvites()
	})
}

// SetCheckLinks sets the "check_links" field.
func (u *ServerConfigUpsertOne) SetCheckLinks(v bool) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetCheckLinks(v)
	})
}

// UpdateCheckLinks sets the "check_links" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateCheckLinks() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateCheckLinks()
	})
}

// SetRatelimit sets the "ratelimit" field.
func (u *ServerConfigUpsertOne) SetRatelimit(v bool) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetRatelimit(v)
	})
}

// UpdateRatelimit sets the "ratelimit" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateRatelimit() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateRatelimit()
	})
}

// SetAlerts sets the "alerts" field.
func (u *ServerConfigUpsertOne) SetAlerts(v bool) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetAlerts(v)
	})
}

// UpdateAlerts sets the "alerts" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateAlerts() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateAlerts()
	})
}

// SetFlagLinks sets the "flag_links" field.
func (u *ServerConfigUpsertOne) SetFlagLinks(v bool) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetFlagLinks(v)
	})
}

// UpdateFlagLinks sets the "flag_links" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateFlagLinks() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateFlagLinks()
	})
}

// SetLogChannel sets the "log_channel" field.
func (u *ServerConfigUpsertOne) SetLogChannel(v string) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetLogChannel(v)
	})
}

// UpdateLogChannel sets the "log_channel" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateLogChannel() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateLogChannel()
	})
}

// SetExcludedChannels sets the "excluded_channels" field.
func (u *ServerConfigUpsertOne) SetExcludedChannels(v []string) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetExcludedChannels(v)
	})
}

// UpdateExcludedChannels sets the "excluded_channels" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateExcludedChannels() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateExcludedChannels()
	})
}

// SetExcludedRoles sets the "excluded_roles" field.
func (u *ServerConfigUpsertOne) SetExcludedRoles(v []string) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetExcludedRoles(v)
	})
}

// UpdateExcludedRoles sets the "excluded_roles" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateExcludedRoles() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateExcludedRoles()
	})
}

// SetExcludedUsers sets the "excluded_users" field.
func (u *ServerConfigUpsertOne) SetExcludedUsers(v []string) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetExcludedUsers(v)
	})
}

// UpdateExcludedUsers sets the "excluded_users" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateExcludedUsers() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateExcludedUsers()
	})
}

// SetGivenRole sets the "given_role" field.
func (u *ServerConfigUpsertOne) SetGivenRole(v string) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetGivenRole(v)
	})
}

// UpdateGivenRole sets the "given_role" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateGivenRole() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateGivenRole()
	})
}

// SetRatelimitMessage sets the "ratelimit_message" field.
func (u *ServerConfigUpsertOne) SetRatelimitMessage(v int) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetRatelimitMessage(v)
	})
}

// AddRatelimitMessage adds v to the "ratelimit_message" field.
func (u *ServerConfigUpsertOne) AddRatelimitMessage(v int) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.AddRatelimitMessage(v)
	})
}

// UpdateRatelimitMessage sets the "ratelimit_message" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateRatelimitMessage() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateRatelimitMessage()
	})
}

// SetRatelimitTime sets the "ratelimit_time" field.
func (u *ServerConfigUpsertOne) SetRatelimitTime(v serverconfig.RatelimitTime) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetRatelimitTime(v)
	})
}

// UpdateRatelimitTime sets the "ratelimit_time" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateRatelimitTime() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateRatelimitTime()
	})
}

// SetTimeoutTime sets the "timeout_time" field.
func (u *ServerConfigUpsertOne) SetTimeoutTime(v serverconfig.TimeoutTime) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetTimeoutTime(v)
	})
}

// UpdateTimeoutTime sets the "timeout_time" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateTimeoutTime() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateTimeoutTime()
	})
}

// SetBanDeleteMessageTime sets the "ban_delete_message_time" field.
func (u *ServerConfigUpsertOne) SetBanDeleteMessageTime(v serverconfig.BanDeleteMessageTime) *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetBanDeleteMessageTime(v)
	})
}

// UpdateBanDeleteMessageTime sets the "ban_delete_message_time" field to the value that was provided on create.
func (u *ServerConfigUpsertOne) UpdateBanDeleteMessageTime() *ServerConfigUpsertOne {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateBanDeleteMessageTime()
	})
}

// Exec executes the query.
func (u *ServerConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ServerConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServerConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ServerConfigUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ServerConfigUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ServerConfigCreateBulk is the builder for creating many ServerConfig entities in bulk.
type ServerConfigCreateBulk struct {
	config
	err      error
	builders []*ServerConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the ServerConfig entities in the database.
func (sccb *ServerConfigCreateBulk) Save(ctx context.Context) ([]*ServerConfig, error) {
	if sccb.err != nil {
		return nil, sccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*ServerConfig, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServerConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *ServerConfigCreateBulk) SaveX(ctx context.Context) []*ServerConfig {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *ServerConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *ServerConfigCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ServerConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServerConfigUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (sccb *ServerConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *ServerConfigUpsertBulk {
	sccb.conflict = opts
	return &ServerConfigUpsertBulk{
		create: sccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ServerConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sccb *ServerConfigCreateBulk) OnConflictColumns(columns ...string) *ServerConfigUpsertBulk {
	sccb.conflict = append(sccb.conflict, sql.ConflictColumns(columns...))
	return &ServerConfigUpsertBulk{
		create: sccb,
	}
}

// ServerConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of ServerConfig nodes.
type ServerConfigUpsertBulk struct {
	create *ServerConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ServerConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ServerConfigUpsertBulk) UpdateNewValues() *ServerConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(serverconfig.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ServerConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ServerConfigUpsertBulk) Ignore() *ServerConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServerConfigUpsertBulk) DoNothing() *ServerConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServerConfigCreateBulk.OnConflict
// documentation for more info.
func (u *ServerConfigUpsertBulk) Update(set func(*ServerConfigUpsert)) *ServerConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServerConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *ServerConfigUpsertBulk) SetUpdateTime(v time.Time) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateUpdateTime() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetRemoveRoles sets the "remove_roles" field.
func (u *ServerConfigUpsertBulk) SetRemoveRoles(v bool) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetRemoveRoles(v)
	})
}

// UpdateRemoveRoles sets the "remove_roles" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateRemoveRoles() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateRemoveRoles()
	})
}

// SetGiveRole sets the "give_role" field.
func (u *ServerConfigUpsertBulk) SetGiveRole(v bool) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetGiveRole(v)
	})
}

// UpdateGiveRole sets the "give_role" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateGiveRole() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateGiveRole()
	})
}

// SetTimeout sets the "timeout" field.
func (u *ServerConfigUpsertBulk) SetTimeout(v bool) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateTimeout() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateTimeout()
	})
}

// SetKick sets the "kick" field.
func (u *ServerConfigUpsertBulk) SetKick(v bool) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetKick(v)
	})
}

// UpdateKick sets the "kick" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateKick() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateKick()
	})
}

// SetBan sets the "ban" field.
func (u *ServerConfigUpsertBulk) SetBan(v bool) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetBan(v)
	})
}

// UpdateBan sets the "ban" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateBan() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateBan()
	})
}

// SetCheckInvites sets the "check_invites" field.
func (u *ServerConfigUpsertBulk) SetCheckInvites(v bool) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetCheckInvites(v)
	})
}

// UpdateCheckInvites sets the "check_invites" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateCheckInvites() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateCheckInvites()
	})
}

// SetCheckLinks sets the "check_links" field.
func (u *ServerConfigUpsertBulk) SetCheckLinks(v bool) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetCheckLinks(v)
	})
}

// UpdateCheckLinks sets the "check_links" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateCheckLinks() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateCheckLinks()
	})
}

// SetRatelimit sets the "ratelimit" field.
func (u *ServerConfigUpsertBulk) SetRatelimit(v bool) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetRatelimit(v)
	})
}

// UpdateRatelimit sets the "ratelimit" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateRatelimit() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateRatelimit()
	})
}

// SetAlerts sets the "alerts" field.
func (u *ServerConfigUpsertBulk) SetAlerts(v bool) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetAlerts(v)
	})
}

// UpdateAlerts sets the "alerts" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateAlerts() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateAlerts()
	})
}

// SetFlagLinks sets the "flag_links" field.
func (u *ServerConfigUpsertBulk) SetFlagLinks(v bool) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetFlagLinks(v)
	})
}

// UpdateFlagLinks sets the "flag_links" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateFlagLinks() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateFlagLinks()
	})
}

// SetLogChannel sets the "log_channel" field.
func (u *ServerConfigUpsertBulk) SetLogChannel(v string) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetLogChannel(v)
	})
}

// UpdateLogChannel sets the "log_channel" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateLogChannel() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateLogChannel()
	})
}

// SetExcludedChannels sets the "excluded_channels" field.
func (u *ServerConfigUpsertBulk) SetExcludedChannels(v []string) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetExcludedChannels(v)
	})
}

// UpdateExcludedChannels sets the "excluded_channels" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateExcludedChannels() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateExcludedChannels()
	})
}

// SetExcludedRoles sets the "excluded_roles" field.
func (u *ServerConfigUpsertBulk) SetExcludedRoles(v []string) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetExcludedRoles(v)
	})
}

// UpdateExcludedRoles sets the "excluded_roles" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateExcludedRoles() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateExcludedRoles()
	})
}

// SetExcludedUsers sets the "excluded_users" field.
func (u *ServerConfigUpsertBulk) SetExcludedUsers(v []string) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetExcludedUsers(v)
	})
}

// UpdateExcludedUsers sets the "excluded_users" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateExcludedUsers() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateExcludedUsers()
	})
}

// SetGivenRole sets the "given_role" field.
func (u *ServerConfigUpsertBulk) SetGivenRole(v string) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetGivenRole(v)
	})
}

// UpdateGivenRole sets the "given_role" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateGivenRole() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateGivenRole()
	})
}

// SetRatelimitMessage sets the "ratelimit_message" field.
func (u *ServerConfigUpsertBulk) SetRatelimitMessage(v int) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetRatelimitMessage(v)
	})
}

// AddRatelimitMessage adds v to the "ratelimit_message" field.
func (u *ServerConfigUpsertBulk) AddRatelimitMessage(v int) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.AddRatelimitMessage(v)
	})
}

// UpdateRatelimitMessage sets the "ratelimit_message" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateRatelimitMessage() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateRatelimitMessage()
	})
}

// SetRatelimitTime sets the "ratelimit_time" field.
func (u *ServerConfigUpsertBulk) SetRatelimitTime(v serverconfig.RatelimitTime) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetRatelimitTime(v)
	})
}

// UpdateRatelimitTime sets the "ratelimit_time" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateRatelimitTime() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateRatelimitTime()
	})
}

// SetTimeoutTime sets the "timeout_time" field.
func (u *ServerConfigUpsertBulk) SetTimeoutTime(v serverconfig.TimeoutTime) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetTimeoutTime(v)
	})
}

// UpdateTimeoutTime sets the "timeout_time" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateTimeoutTime() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateTimeoutTime()
	})
}

// SetBanDeleteMessageTime sets the "ban_delete_message_time" field.
func (u *ServerConfigUpsertBulk) SetBanDeleteMessageTime(v serverconfig.BanDeleteMessageTime) *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.SetBanDeleteMessageTime(v)
	})
}

// UpdateBanDeleteMessageTime sets the "ban_delete_message_time" field to the value that was provided on create.
func (u *ServerConfigUpsertBulk) UpdateBanDeleteMessageTime() *ServerConfigUpsertBulk {
	return u.Update(func(s *ServerConfigUpsert) {
		s.UpdateBanDeleteMessageTime()
	})
}

// Exec executes the query.
func (u *ServerConfigUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ServerConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ServerConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServerConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
