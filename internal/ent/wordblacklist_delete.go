// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/FM1337/ASB/internal/ent/predicate"
	"github.com/FM1337/ASB/internal/ent/wordblacklist"
)

// WordBlacklistDelete is the builder for deleting a WordBlacklist entity.
type WordBlacklistDelete struct {
	config
	hooks    []Hook
	mutation *WordBlacklistMutation
}

// Where appends a list predicates to the WordBlacklistDelete builder.
func (wbd *WordBlacklistDelete) Where(ps ...predicate.WordBlacklist) *WordBlacklistDelete {
	wbd.mutation.Where(ps...)
	return wbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wbd *WordBlacklistDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wbd.sqlExec, wbd.mutation, wbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wbd *WordBlacklistDelete) ExecX(ctx context.Context) int {
	n, err := wbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wbd *WordBlacklistDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(wordblacklist.Table, sqlgraph.NewFieldSpec(wordblacklist.FieldID, field.TypeInt))
	if ps := wbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wbd.mutation.done = true
	return affected, err
}

// WordBlacklistDeleteOne is the builder for deleting a single WordBlacklist entity.
type WordBlacklistDeleteOne struct {
	wbd *WordBlacklistDelete
}

// Where appends a list predicates to the WordBlacklistDelete builder.
func (wbdo *WordBlacklistDeleteOne) Where(ps ...predicate.WordBlacklist) *WordBlacklistDeleteOne {
	wbdo.wbd.mutation.Where(ps...)
	return wbdo
}

// Exec executes the deletion query.
func (wbdo *WordBlacklistDeleteOne) Exec(ctx context.Context) error {
	n, err := wbdo.wbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{wordblacklist.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wbdo *WordBlacklistDeleteOne) ExecX(ctx context.Context) {
	if err := wbdo.Exec(ctx); err != nil {
		panic(err)
	}
}
