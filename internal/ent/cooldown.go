// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/FM1337/ASB/internal/ent/cooldown"
	"github.com/FM1337/ASB/internal/ent/server"
)

// Cooldown is the model entity for the Cooldown schema.
type Cooldown struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// the discord id of the user
	UserID string `json:"user_id,omitempty"`
	// the hash of the message being potentially spammed
	Hash string `json:"hash,omitempty"`
	// The amount of times the message has been seen
	Count int `json:"count,omitempty"`
	// The time the cooldown expires at
	ResetsAt time.Time `json:"resets_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CooldownQuery when eager-loading is set.
	Edges           CooldownEdges `json:"edges"`
	server_cooldown *int
	selectValues    sql.SelectValues
}

// CooldownEdges holds the relations/edges for other nodes in the graph.
type CooldownEdges struct {
	// Server holds the value of the server edge.
	Server *Server `json:"server,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServerOrErr returns the Server value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CooldownEdges) ServerOrErr() (*Server, error) {
	if e.Server != nil {
		return e.Server, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: server.Label}
	}
	return nil, &NotLoadedError{edge: "server"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cooldown) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cooldown.FieldID, cooldown.FieldCount:
			values[i] = new(sql.NullInt64)
		case cooldown.FieldUserID, cooldown.FieldHash:
			values[i] = new(sql.NullString)
		case cooldown.FieldCreateTime, cooldown.FieldUpdateTime, cooldown.FieldResetsAt:
			values[i] = new(sql.NullTime)
		case cooldown.ForeignKeys[0]: // server_cooldown
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cooldown fields.
func (c *Cooldown) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cooldown.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case cooldown.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case cooldown.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		case cooldown.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				c.UserID = value.String
			}
		case cooldown.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				c.Hash = value.String
			}
		case cooldown.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				c.Count = int(value.Int64)
			}
		case cooldown.FieldResetsAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field resets_at", values[i])
			} else if value.Valid {
				c.ResetsAt = value.Time
			}
		case cooldown.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field server_cooldown", value)
			} else if value.Valid {
				c.server_cooldown = new(int)
				*c.server_cooldown = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Cooldown.
// This includes values selected through modifiers, order, etc.
func (c *Cooldown) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryServer queries the "server" edge of the Cooldown entity.
func (c *Cooldown) QueryServer() *ServerQuery {
	return NewCooldownClient(c.config).QueryServer(c)
}

// Update returns a builder for updating this Cooldown.
// Note that you need to call Cooldown.Unwrap() before calling this method if this Cooldown
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cooldown) Update() *CooldownUpdateOne {
	return NewCooldownClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Cooldown entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cooldown) Unwrap() *Cooldown {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cooldown is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cooldown) String() string {
	var builder strings.Builder
	builder.WriteString("Cooldown(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(c.UserID)
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(c.Hash)
	builder.WriteString(", ")
	builder.WriteString("count=")
	builder.WriteString(fmt.Sprintf("%v", c.Count))
	builder.WriteString(", ")
	builder.WriteString("resets_at=")
	builder.WriteString(c.ResetsAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Cooldowns is a parsable slice of Cooldown.
type Cooldowns []*Cooldown
