// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/FM1337/ASB/internal/ent/cooldown"
	"github.com/FM1337/ASB/internal/ent/server"
)

// CooldownCreate is the builder for creating a Cooldown entity.
type CooldownCreate struct {
	config
	mutation *CooldownMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (cc *CooldownCreate) SetCreateTime(t time.Time) *CooldownCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *CooldownCreate) SetNillableCreateTime(t *time.Time) *CooldownCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *CooldownCreate) SetUpdateTime(t time.Time) *CooldownCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *CooldownCreate) SetNillableUpdateTime(t *time.Time) *CooldownCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *CooldownCreate) SetUserID(s string) *CooldownCreate {
	cc.mutation.SetUserID(s)
	return cc
}

// SetHash sets the "hash" field.
func (cc *CooldownCreate) SetHash(s string) *CooldownCreate {
	cc.mutation.SetHash(s)
	return cc
}

// SetCount sets the "count" field.
func (cc *CooldownCreate) SetCount(i int) *CooldownCreate {
	cc.mutation.SetCount(i)
	return cc
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (cc *CooldownCreate) SetNillableCount(i *int) *CooldownCreate {
	if i != nil {
		cc.SetCount(*i)
	}
	return cc
}

// SetResetsAt sets the "resets_at" field.
func (cc *CooldownCreate) SetResetsAt(t time.Time) *CooldownCreate {
	cc.mutation.SetResetsAt(t)
	return cc
}

// SetNillableResetsAt sets the "resets_at" field if the given value is not nil.
func (cc *CooldownCreate) SetNillableResetsAt(t *time.Time) *CooldownCreate {
	if t != nil {
		cc.SetResetsAt(*t)
	}
	return cc
}

// SetServerID sets the "server" edge to the Server entity by ID.
func (cc *CooldownCreate) SetServerID(id int) *CooldownCreate {
	cc.mutation.SetServerID(id)
	return cc
}

// SetServer sets the "server" edge to the Server entity.
func (cc *CooldownCreate) SetServer(s *Server) *CooldownCreate {
	return cc.SetServerID(s.ID)
}

// Mutation returns the CooldownMutation object of the builder.
func (cc *CooldownCreate) Mutation() *CooldownMutation {
	return cc.mutation
}

// Save creates the Cooldown in the database.
func (cc *CooldownCreate) Save(ctx context.Context) (*Cooldown, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CooldownCreate) SaveX(ctx context.Context) *Cooldown {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CooldownCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CooldownCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CooldownCreate) defaults() {
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := cooldown.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		v := cooldown.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
	if _, ok := cc.mutation.Count(); !ok {
		v := cooldown.DefaultCount
		cc.mutation.SetCount(v)
	}
	if _, ok := cc.mutation.ResetsAt(); !ok {
		v := cooldown.DefaultResetsAt()
		cc.mutation.SetResetsAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CooldownCreate) check() error {
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Cooldown.create_time"`)}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Cooldown.update_time"`)}
	}
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Cooldown.user_id"`)}
	}
	if _, ok := cc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Cooldown.hash"`)}
	}
	if _, ok := cc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`ent: missing required field "Cooldown.count"`)}
	}
	if _, ok := cc.mutation.ResetsAt(); !ok {
		return &ValidationError{Name: "resets_at", err: errors.New(`ent: missing required field "Cooldown.resets_at"`)}
	}
	if _, ok := cc.mutation.ServerID(); !ok {
		return &ValidationError{Name: "server", err: errors.New(`ent: missing required edge "Cooldown.server"`)}
	}
	return nil
}

func (cc *CooldownCreate) sqlSave(ctx context.Context) (*Cooldown, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CooldownCreate) createSpec() (*Cooldown, *sqlgraph.CreateSpec) {
	var (
		_node = &Cooldown{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(cooldown.Table, sqlgraph.NewFieldSpec(cooldown.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(cooldown.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.SetField(cooldown.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := cc.mutation.UserID(); ok {
		_spec.SetField(cooldown.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := cc.mutation.Hash(); ok {
		_spec.SetField(cooldown.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := cc.mutation.Count(); ok {
		_spec.SetField(cooldown.FieldCount, field.TypeInt, value)
		_node.Count = value
	}
	if value, ok := cc.mutation.ResetsAt(); ok {
		_spec.SetField(cooldown.FieldResetsAt, field.TypeTime, value)
		_node.ResetsAt = value
	}
	if nodes := cc.mutation.ServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cooldown.ServerTable,
			Columns: []string{cooldown.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.server_cooldown = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Cooldown.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CooldownUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (cc *CooldownCreate) OnConflict(opts ...sql.ConflictOption) *CooldownUpsertOne {
	cc.conflict = opts
	return &CooldownUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Cooldown.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CooldownCreate) OnConflictColumns(columns ...string) *CooldownUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CooldownUpsertOne{
		create: cc,
	}
}

type (
	// CooldownUpsertOne is the builder for "upsert"-ing
	//  one Cooldown node.
	CooldownUpsertOne struct {
		create *CooldownCreate
	}

	// CooldownUpsert is the "OnConflict" setter.
	CooldownUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *CooldownUpsert) SetUpdateTime(v time.Time) *CooldownUpsert {
	u.Set(cooldown.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CooldownUpsert) UpdateUpdateTime() *CooldownUpsert {
	u.SetExcluded(cooldown.FieldUpdateTime)
	return u
}

// SetUserID sets the "user_id" field.
func (u *CooldownUpsert) SetUserID(v string) *CooldownUpsert {
	u.Set(cooldown.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CooldownUpsert) UpdateUserID() *CooldownUpsert {
	u.SetExcluded(cooldown.FieldUserID)
	return u
}

// SetHash sets the "hash" field.
func (u *CooldownUpsert) SetHash(v string) *CooldownUpsert {
	u.Set(cooldown.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *CooldownUpsert) UpdateHash() *CooldownUpsert {
	u.SetExcluded(cooldown.FieldHash)
	return u
}

// SetCount sets the "count" field.
func (u *CooldownUpsert) SetCount(v int) *CooldownUpsert {
	u.Set(cooldown.FieldCount, v)
	return u
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *CooldownUpsert) UpdateCount() *CooldownUpsert {
	u.SetExcluded(cooldown.FieldCount)
	return u
}

// AddCount adds v to the "count" field.
func (u *CooldownUpsert) AddCount(v int) *CooldownUpsert {
	u.Add(cooldown.FieldCount, v)
	return u
}

// SetResetsAt sets the "resets_at" field.
func (u *CooldownUpsert) SetResetsAt(v time.Time) *CooldownUpsert {
	u.Set(cooldown.FieldResetsAt, v)
	return u
}

// UpdateResetsAt sets the "resets_at" field to the value that was provided on create.
func (u *CooldownUpsert) UpdateResetsAt() *CooldownUpsert {
	u.SetExcluded(cooldown.FieldResetsAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Cooldown.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CooldownUpsertOne) UpdateNewValues() *CooldownUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(cooldown.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Cooldown.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CooldownUpsertOne) Ignore() *CooldownUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CooldownUpsertOne) DoNothing() *CooldownUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CooldownCreate.OnConflict
// documentation for more info.
func (u *CooldownUpsertOne) Update(set func(*CooldownUpsert)) *CooldownUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CooldownUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CooldownUpsertOne) SetUpdateTime(v time.Time) *CooldownUpsertOne {
	return u.Update(func(s *CooldownUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CooldownUpsertOne) UpdateUpdateTime() *CooldownUpsertOne {
	return u.Update(func(s *CooldownUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetUserID sets the "user_id" field.
func (u *CooldownUpsertOne) SetUserID(v string) *CooldownUpsertOne {
	return u.Update(func(s *CooldownUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CooldownUpsertOne) UpdateUserID() *CooldownUpsertOne {
	return u.Update(func(s *CooldownUpsert) {
		s.UpdateUserID()
	})
}

// SetHash sets the "hash" field.
func (u *CooldownUpsertOne) SetHash(v string) *CooldownUpsertOne {
	return u.Update(func(s *CooldownUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *CooldownUpsertOne) UpdateHash() *CooldownUpsertOne {
	return u.Update(func(s *CooldownUpsert) {
		s.UpdateHash()
	})
}

// SetCount sets the "count" field.
func (u *CooldownUpsertOne) SetCount(v int) *CooldownUpsertOne {
	return u.Update(func(s *CooldownUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *CooldownUpsertOne) AddCount(v int) *CooldownUpsertOne {
	return u.Update(func(s *CooldownUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *CooldownUpsertOne) UpdateCount() *CooldownUpsertOne {
	return u.Update(func(s *CooldownUpsert) {
		s.UpdateCount()
	})
}

// SetResetsAt sets the "resets_at" field.
func (u *CooldownUpsertOne) SetResetsAt(v time.Time) *CooldownUpsertOne {
	return u.Update(func(s *CooldownUpsert) {
		s.SetResetsAt(v)
	})
}

// UpdateResetsAt sets the "resets_at" field to the value that was provided on create.
func (u *CooldownUpsertOne) UpdateResetsAt() *CooldownUpsertOne {
	return u.Update(func(s *CooldownUpsert) {
		s.UpdateResetsAt()
	})
}

// Exec executes the query.
func (u *CooldownUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CooldownCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CooldownUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CooldownUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CooldownUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CooldownCreateBulk is the builder for creating many Cooldown entities in bulk.
type CooldownCreateBulk struct {
	config
	err      error
	builders []*CooldownCreate
	conflict []sql.ConflictOption
}

// Save creates the Cooldown entities in the database.
func (ccb *CooldownCreateBulk) Save(ctx context.Context) ([]*Cooldown, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cooldown, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CooldownMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CooldownCreateBulk) SaveX(ctx context.Context) []*Cooldown {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CooldownCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CooldownCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Cooldown.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CooldownUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ccb *CooldownCreateBulk) OnConflict(opts ...sql.ConflictOption) *CooldownUpsertBulk {
	ccb.conflict = opts
	return &CooldownUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Cooldown.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CooldownCreateBulk) OnConflictColumns(columns ...string) *CooldownUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CooldownUpsertBulk{
		create: ccb,
	}
}

// CooldownUpsertBulk is the builder for "upsert"-ing
// a bulk of Cooldown nodes.
type CooldownUpsertBulk struct {
	create *CooldownCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Cooldown.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CooldownUpsertBulk) UpdateNewValues() *CooldownUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(cooldown.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Cooldown.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CooldownUpsertBulk) Ignore() *CooldownUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CooldownUpsertBulk) DoNothing() *CooldownUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CooldownCreateBulk.OnConflict
// documentation for more info.
func (u *CooldownUpsertBulk) Update(set func(*CooldownUpsert)) *CooldownUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CooldownUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CooldownUpsertBulk) SetUpdateTime(v time.Time) *CooldownUpsertBulk {
	return u.Update(func(s *CooldownUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CooldownUpsertBulk) UpdateUpdateTime() *CooldownUpsertBulk {
	return u.Update(func(s *CooldownUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetUserID sets the "user_id" field.
func (u *CooldownUpsertBulk) SetUserID(v string) *CooldownUpsertBulk {
	return u.Update(func(s *CooldownUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CooldownUpsertBulk) UpdateUserID() *CooldownUpsertBulk {
	return u.Update(func(s *CooldownUpsert) {
		s.UpdateUserID()
	})
}

// SetHash sets the "hash" field.
func (u *CooldownUpsertBulk) SetHash(v string) *CooldownUpsertBulk {
	return u.Update(func(s *CooldownUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *CooldownUpsertBulk) UpdateHash() *CooldownUpsertBulk {
	return u.Update(func(s *CooldownUpsert) {
		s.UpdateHash()
	})
}

// SetCount sets the "count" field.
func (u *CooldownUpsertBulk) SetCount(v int) *CooldownUpsertBulk {
	return u.Update(func(s *CooldownUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *CooldownUpsertBulk) AddCount(v int) *CooldownUpsertBulk {
	return u.Update(func(s *CooldownUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *CooldownUpsertBulk) UpdateCount() *CooldownUpsertBulk {
	return u.Update(func(s *CooldownUpsert) {
		s.UpdateCount()
	})
}

// SetResetsAt sets the "resets_at" field.
func (u *CooldownUpsertBulk) SetResetsAt(v time.Time) *CooldownUpsertBulk {
	return u.Update(func(s *CooldownUpsert) {
		s.SetResetsAt(v)
	})
}

// UpdateResetsAt sets the "resets_at" field to the value that was provided on create.
func (u *CooldownUpsertBulk) UpdateResetsAt() *CooldownUpsertBulk {
	return u.Update(func(s *CooldownUpsert) {
		s.UpdateResetsAt()
	})
}

// Exec executes the query.
func (u *CooldownUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CooldownCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CooldownCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CooldownUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
