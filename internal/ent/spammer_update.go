// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/FM1337/ASB/internal/ent/predicate"
	"github.com/FM1337/ASB/internal/ent/server"
	"github.com/FM1337/ASB/internal/ent/spammer"
)

// SpammerUpdate is the builder for updating Spammer entities.
type SpammerUpdate struct {
	config
	hooks     []Hook
	mutation  *SpammerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SpammerUpdate builder.
func (su *SpammerUpdate) Where(ps ...predicate.Spammer) *SpammerUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *SpammerUpdate) SetUpdateTime(t time.Time) *SpammerUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetUserID sets the "user_id" field.
func (su *SpammerUpdate) SetUserID(s string) *SpammerUpdate {
	su.mutation.SetUserID(s)
	return su
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (su *SpammerUpdate) SetNillableUserID(s *string) *SpammerUpdate {
	if s != nil {
		su.SetUserID(*s)
	}
	return su
}

// SetRemovedRoles sets the "removed_roles" field.
func (su *SpammerUpdate) SetRemovedRoles(s []string) *SpammerUpdate {
	su.mutation.SetRemovedRoles(s)
	return su
}

// AppendRemovedRoles appends s to the "removed_roles" field.
func (su *SpammerUpdate) AppendRemovedRoles(s []string) *SpammerUpdate {
	su.mutation.AppendRemovedRoles(s)
	return su
}

// ClearRemovedRoles clears the value of the "removed_roles" field.
func (su *SpammerUpdate) ClearRemovedRoles() *SpammerUpdate {
	su.mutation.ClearRemovedRoles()
	return su
}

// SetLastFlagged sets the "last_flagged" field.
func (su *SpammerUpdate) SetLastFlagged(t time.Time) *SpammerUpdate {
	su.mutation.SetLastFlagged(t)
	return su
}

// SetNillableLastFlagged sets the "last_flagged" field if the given value is not nil.
func (su *SpammerUpdate) SetNillableLastFlagged(t *time.Time) *SpammerUpdate {
	if t != nil {
		su.SetLastFlagged(*t)
	}
	return su
}

// SetServerID sets the "server" edge to the Server entity by ID.
func (su *SpammerUpdate) SetServerID(id int) *SpammerUpdate {
	su.mutation.SetServerID(id)
	return su
}

// SetServer sets the "server" edge to the Server entity.
func (su *SpammerUpdate) SetServer(s *Server) *SpammerUpdate {
	return su.SetServerID(s.ID)
}

// Mutation returns the SpammerMutation object of the builder.
func (su *SpammerUpdate) Mutation() *SpammerMutation {
	return su.mutation
}

// ClearServer clears the "server" edge to the Server entity.
func (su *SpammerUpdate) ClearServer() *SpammerUpdate {
	su.mutation.ClearServer()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SpammerUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SpammerUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SpammerUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SpammerUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SpammerUpdate) defaults() {
	if _, ok := su.mutation.UpdateTime(); !ok {
		v := spammer.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SpammerUpdate) check() error {
	if _, ok := su.mutation.ServerID(); su.mutation.ServerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Spammer.server"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SpammerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SpammerUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SpammerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(spammer.Table, spammer.Columns, sqlgraph.NewFieldSpec(spammer.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.SetField(spammer.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.UserID(); ok {
		_spec.SetField(spammer.FieldUserID, field.TypeString, value)
	}
	if value, ok := su.mutation.RemovedRoles(); ok {
		_spec.SetField(spammer.FieldRemovedRoles, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedRemovedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, spammer.FieldRemovedRoles, value)
		})
	}
	if su.mutation.RemovedRolesCleared() {
		_spec.ClearField(spammer.FieldRemovedRoles, field.TypeJSON)
	}
	if value, ok := su.mutation.LastFlagged(); ok {
		_spec.SetField(spammer.FieldLastFlagged, field.TypeTime, value)
	}
	if su.mutation.ServerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   spammer.ServerTable,
			Columns: []string{spammer.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   spammer.ServerTable,
			Columns: []string{spammer.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spammer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SpammerUpdateOne is the builder for updating a single Spammer entity.
type SpammerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SpammerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (suo *SpammerUpdateOne) SetUpdateTime(t time.Time) *SpammerUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetUserID sets the "user_id" field.
func (suo *SpammerUpdateOne) SetUserID(s string) *SpammerUpdateOne {
	suo.mutation.SetUserID(s)
	return suo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suo *SpammerUpdateOne) SetNillableUserID(s *string) *SpammerUpdateOne {
	if s != nil {
		suo.SetUserID(*s)
	}
	return suo
}

// SetRemovedRoles sets the "removed_roles" field.
func (suo *SpammerUpdateOne) SetRemovedRoles(s []string) *SpammerUpdateOne {
	suo.mutation.SetRemovedRoles(s)
	return suo
}

// AppendRemovedRoles appends s to the "removed_roles" field.
func (suo *SpammerUpdateOne) AppendRemovedRoles(s []string) *SpammerUpdateOne {
	suo.mutation.AppendRemovedRoles(s)
	return suo
}

// ClearRemovedRoles clears the value of the "removed_roles" field.
func (suo *SpammerUpdateOne) ClearRemovedRoles() *SpammerUpdateOne {
	suo.mutation.ClearRemovedRoles()
	return suo
}

// SetLastFlagged sets the "last_flagged" field.
func (suo *SpammerUpdateOne) SetLastFlagged(t time.Time) *SpammerUpdateOne {
	suo.mutation.SetLastFlagged(t)
	return suo
}

// SetNillableLastFlagged sets the "last_flagged" field if the given value is not nil.
func (suo *SpammerUpdateOne) SetNillableLastFlagged(t *time.Time) *SpammerUpdateOne {
	if t != nil {
		suo.SetLastFlagged(*t)
	}
	return suo
}

// SetServerID sets the "server" edge to the Server entity by ID.
func (suo *SpammerUpdateOne) SetServerID(id int) *SpammerUpdateOne {
	suo.mutation.SetServerID(id)
	return suo
}

// SetServer sets the "server" edge to the Server entity.
func (suo *SpammerUpdateOne) SetServer(s *Server) *SpammerUpdateOne {
	return suo.SetServerID(s.ID)
}

// Mutation returns the SpammerMutation object of the builder.
func (suo *SpammerUpdateOne) Mutation() *SpammerMutation {
	return suo.mutation
}

// ClearServer clears the "server" edge to the Server entity.
func (suo *SpammerUpdateOne) ClearServer() *SpammerUpdateOne {
	suo.mutation.ClearServer()
	return suo
}

// Where appends a list predicates to the SpammerUpdate builder.
func (suo *SpammerUpdateOne) Where(ps ...predicate.Spammer) *SpammerUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SpammerUpdateOne) Select(field string, fields ...string) *SpammerUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Spammer entity.
func (suo *SpammerUpdateOne) Save(ctx context.Context) (*Spammer, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SpammerUpdateOne) SaveX(ctx context.Context) *Spammer {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SpammerUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SpammerUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SpammerUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdateTime(); !ok {
		v := spammer.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SpammerUpdateOne) check() error {
	if _, ok := suo.mutation.ServerID(); suo.mutation.ServerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Spammer.server"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SpammerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SpammerUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SpammerUpdateOne) sqlSave(ctx context.Context) (_node *Spammer, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(spammer.Table, spammer.Columns, sqlgraph.NewFieldSpec(spammer.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Spammer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, spammer.FieldID)
		for _, f := range fields {
			if !spammer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != spammer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.SetField(spammer.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UserID(); ok {
		_spec.SetField(spammer.FieldUserID, field.TypeString, value)
	}
	if value, ok := suo.mutation.RemovedRoles(); ok {
		_spec.SetField(spammer.FieldRemovedRoles, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedRemovedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, spammer.FieldRemovedRoles, value)
		})
	}
	if suo.mutation.RemovedRolesCleared() {
		_spec.ClearField(spammer.FieldRemovedRoles, field.TypeJSON)
	}
	if value, ok := suo.mutation.LastFlagged(); ok {
		_spec.SetField(spammer.FieldLastFlagged, field.TypeTime, value)
	}
	if suo.mutation.ServerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   spammer.ServerTable,
			Columns: []string{spammer.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   spammer.ServerTable,
			Columns: []string{spammer.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Spammer{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{spammer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
