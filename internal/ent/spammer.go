// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/FM1337/ASB/internal/ent/server"
	"github.com/FM1337/ASB/internal/ent/spammer"
)

// Spammer is the model entity for the Spammer schema.
type Spammer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// the discord id of the user
	UserID string `json:"user_id,omitempty"`
	// a list of removed roles on the user if remove roles is enabled
	RemovedRoles []string `json:"removed_roles,omitempty"`
	// The last time the user was flagged by the bot as a spammer
	LastFlagged time.Time `json:"last_flagged,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SpammerQuery when eager-loading is set.
	Edges          SpammerEdges `json:"edges"`
	server_spammer *int
	selectValues   sql.SelectValues
}

// SpammerEdges holds the relations/edges for other nodes in the graph.
type SpammerEdges struct {
	// Server holds the value of the server edge.
	Server *Server `json:"server,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServerOrErr returns the Server value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SpammerEdges) ServerOrErr() (*Server, error) {
	if e.Server != nil {
		return e.Server, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: server.Label}
	}
	return nil, &NotLoadedError{edge: "server"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Spammer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case spammer.FieldRemovedRoles:
			values[i] = new([]byte)
		case spammer.FieldID:
			values[i] = new(sql.NullInt64)
		case spammer.FieldUserID:
			values[i] = new(sql.NullString)
		case spammer.FieldCreateTime, spammer.FieldUpdateTime, spammer.FieldLastFlagged:
			values[i] = new(sql.NullTime)
		case spammer.ForeignKeys[0]: // server_spammer
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Spammer fields.
func (s *Spammer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spammer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case spammer.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				s.CreateTime = value.Time
			}
		case spammer.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				s.UpdateTime = value.Time
			}
		case spammer.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				s.UserID = value.String
			}
		case spammer.FieldRemovedRoles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field removed_roles", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.RemovedRoles); err != nil {
					return fmt.Errorf("unmarshal field removed_roles: %w", err)
				}
			}
		case spammer.FieldLastFlagged:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_flagged", values[i])
			} else if value.Valid {
				s.LastFlagged = value.Time
			}
		case spammer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field server_spammer", value)
			} else if value.Valid {
				s.server_spammer = new(int)
				*s.server_spammer = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Spammer.
// This includes values selected through modifiers, order, etc.
func (s *Spammer) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryServer queries the "server" edge of the Spammer entity.
func (s *Spammer) QueryServer() *ServerQuery {
	return NewSpammerClient(s.config).QueryServer(s)
}

// Update returns a builder for updating this Spammer.
// Note that you need to call Spammer.Unwrap() before calling this method if this Spammer
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Spammer) Update() *SpammerUpdateOne {
	return NewSpammerClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Spammer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Spammer) Unwrap() *Spammer {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Spammer is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Spammer) String() string {
	var builder strings.Builder
	builder.WriteString("Spammer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("create_time=")
	builder.WriteString(s.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(s.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(s.UserID)
	builder.WriteString(", ")
	builder.WriteString("removed_roles=")
	builder.WriteString(fmt.Sprintf("%v", s.RemovedRoles))
	builder.WriteString(", ")
	builder.WriteString("last_flagged=")
	builder.WriteString(s.LastFlagged.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Spammers is a parsable slice of Spammer.
type Spammers []*Spammer
